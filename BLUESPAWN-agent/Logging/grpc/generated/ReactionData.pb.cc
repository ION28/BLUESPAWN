// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReactionData.proto

#include "ReactionData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ACLEntry_ReactionData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileReactionData_Signature_ReactionData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HuntInfo_ReactionData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProcessReactionData_ReactionData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServiceReactionData_ReactionData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RegistryReactionData_ReactionData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FileReactionData_ReactionData_2eproto;
namespace gpb {
class ACLEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACLEntry> _instance;
} _ACLEntry_default_instance_;
class FileReactionData_SignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileReactionData_Signature> _instance;
} _FileReactionData_Signature_default_instance_;
class FileReactionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileReactionData> _instance;
} _FileReactionData_default_instance_;
class RegistryReactionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegistryReactionData> _instance;
} _RegistryReactionData_default_instance_;
class ProcessReactionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessReactionData> _instance;
} _ProcessReactionData_default_instance_;
class ServiceReactionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceReactionData> _instance;
} _ServiceReactionData_default_instance_;
class HuntInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntInfo> _instance;
} _HuntInfo_default_instance_;
class HuntMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntMessage> _instance;
} _HuntMessage_default_instance_;
}  // namespace gpb
static void InitDefaultsACLEntry_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_ACLEntry_default_instance_;
    new (ptr) ::gpb::ACLEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::ACLEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ACLEntry_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsACLEntry_ReactionData_2eproto}, {}};

static void InitDefaultsFileReactionData_Signature_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_FileReactionData_Signature_default_instance_;
    new (ptr) ::gpb::FileReactionData_Signature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::FileReactionData_Signature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileReactionData_Signature_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileReactionData_Signature_ReactionData_2eproto}, {}};

static void InitDefaultsFileReactionData_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_FileReactionData_default_instance_;
    new (ptr) ::gpb::FileReactionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::FileReactionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FileReactionData_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFileReactionData_ReactionData_2eproto}, {
      &scc_info_FileReactionData_Signature_ReactionData_2eproto.base,
      &scc_info_ACLEntry_ReactionData_2eproto.base,}};

static void InitDefaultsRegistryReactionData_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_RegistryReactionData_default_instance_;
    new (ptr) ::gpb::RegistryReactionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::RegistryReactionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegistryReactionData_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegistryReactionData_ReactionData_2eproto}, {
      &scc_info_ACLEntry_ReactionData_2eproto.base,}};

static void InitDefaultsProcessReactionData_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_ProcessReactionData_default_instance_;
    new (ptr) ::gpb::ProcessReactionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::ProcessReactionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessReactionData_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessReactionData_ReactionData_2eproto}, {}};

static void InitDefaultsServiceReactionData_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_ServiceReactionData_default_instance_;
    new (ptr) ::gpb::ServiceReactionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::ServiceReactionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServiceReactionData_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServiceReactionData_ReactionData_2eproto}, {}};

static void InitDefaultsHuntInfo_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_HuntInfo_default_instance_;
    new (ptr) ::gpb::HuntInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::HuntInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HuntInfo_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHuntInfo_ReactionData_2eproto}, {}};

static void InitDefaultsHuntMessage_ReactionData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpb::_HuntMessage_default_instance_;
    new (ptr) ::gpb::HuntMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpb::HuntMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_HuntMessage_ReactionData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsHuntMessage_ReactionData_2eproto}, {
      &scc_info_HuntInfo_ReactionData_2eproto.base,
      &scc_info_FileReactionData_ReactionData_2eproto.base,
      &scc_info_RegistryReactionData_ReactionData_2eproto.base,
      &scc_info_ProcessReactionData_ReactionData_2eproto.base,
      &scc_info_ServiceReactionData_ReactionData_2eproto.base,}};

void InitDefaults_ReactionData_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ACLEntry_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileReactionData_Signature_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileReactionData_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegistryReactionData_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessReactionData_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceReactionData_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntInfo_ReactionData_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntMessage_ReactionData_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ReactionData_2eproto[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ReactionData_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ReactionData_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ReactionData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::ACLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::ACLEntry, user_),
  PROTOBUF_FIELD_OFFSET(::gpb::ACLEntry, group_),
  PROTOBUF_FIELD_OFFSET(::gpb::ACLEntry, securityattributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData_Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData_Signature, signername_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData_Signature, digestalgorithm_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData_Signature, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, mitreid_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, filename_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, description_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, owner_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, size_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, timecreated_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, timemodified_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, timeaccessed_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, filecontents_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, signatures_),
  PROTOBUF_FIELD_OFFSET(::gpb::FileReactionData, acl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, mitreid_),
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, key_),
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, data_),
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, newdata_),
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, type_),
  PROTOBUF_FIELD_OFFSET(::gpb::RegistryReactionData, acl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, mitreid_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, pid_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, name_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, description_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, commandline_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, path_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, currentdirectory_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, autostartlocation_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, parent_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, user_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, timestarted_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, recievedbytes_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, sentbytes_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, privatebytes_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, workingset_),
  PROTOBUF_FIELD_OFFSET(::gpb::ProcessReactionData, binarycontents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, mitreid_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, pid_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, name_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, description_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, logonas_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, startuptype_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, startparameters_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, allowdesktopinteract_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, runprogrampath_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, binarypath_),
  PROTOBUF_FIELD_OFFSET(::gpb::ServiceReactionData, binarycontents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, huntname_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, huntaggressiveness_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, hunttactics_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, huntcategories_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, huntdatasources_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntInfo, huntstarttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, info_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, extramessage_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, filedetections_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, registrydetections_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, processdetections_),
  PROTOBUF_FIELD_OFFSET(::gpb::HuntMessage, servicedetections_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gpb::ACLEntry)},
  { 8, -1, sizeof(::gpb::FileReactionData_Signature)},
  { 16, -1, sizeof(::gpb::FileReactionData)},
  { 32, -1, sizeof(::gpb::RegistryReactionData)},
  { 43, -1, sizeof(::gpb::ProcessReactionData)},
  { 64, -1, sizeof(::gpb::ServiceReactionData)},
  { 80, -1, sizeof(::gpb::HuntInfo)},
  { 91, -1, sizeof(::gpb::HuntMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_ACLEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_FileReactionData_Signature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_FileReactionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_RegistryReactionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_ProcessReactionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_ServiceReactionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_HuntInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gpb::_HuntMessage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ReactionData_2eproto = {
  {}, AddDescriptors_ReactionData_2eproto, "ReactionData.proto", schemas,
  file_default_instances, TableStruct_ReactionData_2eproto::offsets,
  file_level_metadata_ReactionData_2eproto, 8, file_level_enum_descriptors_ReactionData_2eproto, file_level_service_descriptors_ReactionData_2eproto,
};

const char descriptor_table_protodef_ReactionData_2eproto[] =
  "\n\022ReactionData.proto\022\003gpb\"C\n\010ACLEntry\022\014\n"
  "\004user\030\001 \001(\t\022\r\n\005group\030\002 \001(\t\022\032\n\022securityAt"
  "tributes\030\003 \001(\r\"\334\002\n\020FileReactionData\022\017\n\007m"
  "itreID\030\001 \001(\r\022\020\n\010fileName\030\002 \001(\t\022\023\n\013descri"
  "ption\030\003 \001(\t\022\r\n\005owner\030\004 \001(\t\022\014\n\004size\030\005 \001(\r"
  "\022\023\n\013timeCreated\030\006 \001(\r\022\024\n\014timeModified\030\007 "
  "\001(\r\022\024\n\014timeAccessed\030\010 \001(\r\022\024\n\014fileContent"
  "s\030\t \001(\014\0223\n\nsignatures\030\n \003(\0132\037.gpb.FileRe"
  "actionData.Signature\022\032\n\003ACL\030\013 \003(\0132\r.gpb."
  "ACLEntry\032K\n\tSignature\022\022\n\nsignerName\030\001 \001("
  "\t\022\027\n\017digestAlgorithm\030\002 \001(\t\022\021\n\ttimestamp\030"
  "\003 \001(\r\"\204\002\n\024RegistryReactionData\022\017\n\007mitreI"
  "D\030\001 \001(\r\022\013\n\003key\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\022\017\n\007ne"
  "wData\030\004 \001(\014\022,\n\004type\030\005 \001(\0162\036.gpb.Registry"
  "ReactionData.Type\022\032\n\003ACL\030\006 \003(\0132\r.gpb.ACL"
  "Entry\"e\n\004Type\022\n\n\006REG_SZ\020\000\022\020\n\014REG_MULTI_S"
  "Z\020\001\022\021\n\rREG_EXPAND_SZ\020\002\022\016\n\nREG_BINARY\020\003\022\r"
  "\n\tREG_DWORD\020\004\022\r\n\tREG_QWORD\020\005\"\315\002\n\023Process"
  "ReactionData\022\017\n\007mitreID\030\001 \001(\r\022\013\n\003pid\030\002 \001"
  "(\r\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\023\n"
  "\013commandLine\030\005 \001(\t\022\014\n\004path\030\006 \001(\t\022\030\n\020curr"
  "entDirectory\030\007 \001(\t\022\031\n\021autostartLocation\030"
  "\010 \001(\t\022\016\n\006parent\030\t \001(\t\022\014\n\004user\030\n \001(\t\022\023\n\013t"
  "imeStarted\030\013 \001(\r\022\025\n\rrecievedBytes\030\014 \001(\r\022"
  "\021\n\tsentBytes\030\r \001(\r\022\024\n\014privateBytes\030\016 \001(\r"
  "\022\022\n\nworkingSet\030\017 \001(\r\022\026\n\016binaryContents\030\020"
  " \001(\014\"\367\001\n\023ServiceReactionData\022\017\n\007mitreID\030"
  "\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\023\n\013desc"
  "ription\030\004 \001(\t\022\017\n\007logOnAs\030\005 \001(\t\022\023\n\013startu"
  "pType\030\006 \001(\t\022\027\n\017startParameters\030\007 \001(\t\022\034\n\024"
  "allowDesktopInteract\030\010 \001(\010\022\026\n\016runProgram"
  "Path\030\t \001(\t\022\022\n\nbinaryPath\030\n \001(\t\022\026\n\016binary"
  "Contents\030\013 \001(\014\"\327\001\n\010HuntInfo\022\020\n\010huntName\030"
  "\001 \001(\t\022/\n\022huntAggressiveness\030\002 \001(\0162\023.gpb."
  "Aggressiveness\022 \n\013huntTactics\030\003 \003(\0162\013.gp"
  "b.Tactic\022%\n\016huntCategories\030\004 \003(\0162\r.gpb.C"
  "ategory\022(\n\017huntDatasources\030\005 \003(\0162\017.gpb.D"
  "ataSource\022\025\n\rhuntStartTime\030\006 \001(\r\"\220\002\n\013Hun"
  "tMessage\022\033\n\004info\030\001 \001(\0132\r.gpb.HuntInfo\022\024\n"
  "\014extraMessage\030\003 \001(\t\022-\n\016fileDetections\030\004 "
  "\003(\0132\025.gpb.FileReactionData\0225\n\022registryDe"
  "tections\030\005 \003(\0132\031.gpb.RegistryReactionDat"
  "a\0223\n\021processDetections\030\006 \003(\0132\030.gpb.Proce"
  "ssReactionData\0223\n\021serviceDetections\030\007 \003("
  "\0132\030.gpb.ServiceReactionData*\344\001\n\006Tactic\022\021"
  "\n\rInitialAccess\020\000\022\r\n\tExecution\020\001\022\017\n\013Pers"
  "istence\020\002\022\027\n\023PrivilegeEscalation\020\003\022\022\n\016De"
  "fenseEvasion\020\004\022\024\n\020CredentialAccess\020\005\022\r\n\t"
  "Discovery\020\006\022\023\n\017LateralMovement\020\007\022\016\n\nColl"
  "ection\020\010\022\022\n\016CommandControl\020\t\022\020\n\014Exfiltra"
  "tion\020\n\022\n\n\006Impact\020\014*\245\001\n\nDataSource\022\021\n\rSer"
  "viceSource\020\000\022\021\n\rProcessSource\020\001\022\020\n\014Drive"
  "rSource\020\002\022\024\n\020FileSystemSource\020\003\022\022\n\016Regis"
  "trySource\020\004\022\r\n\tGPOSource\020\005\022\023\n\017EventLogsS"
  "ource\020\006\022\021\n\rNetworkSource\020\007*E\n\010Category\022\022"
  "\n\016Configurations\020\000\022\r\n\tProcesses\020\001\022\t\n\005Fil"
  "es\020\002\022\013\n\007Network\020\003*H\n\016Aggressiveness\022\013\n\007C"
  "ursory\020\000\022\014\n\010Moderate\020\001\022\013\n\007Careful\020\002\022\016\n\nA"
  "ggressive\020\003b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ReactionData_2eproto = {
  false, InitDefaults_ReactionData_2eproto, 
  descriptor_table_protodef_ReactionData_2eproto,
  "ReactionData.proto", &assign_descriptors_table_ReactionData_2eproto, 2339,
};

void AddDescriptors_ReactionData_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ReactionData_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ReactionData_2eproto = []() { AddDescriptors_ReactionData_2eproto(); return true; }();
namespace gpb {
const ::google::protobuf::EnumDescriptor* RegistryReactionData_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ReactionData_2eproto);
  return file_level_enum_descriptors_ReactionData_2eproto[0];
}
bool RegistryReactionData_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RegistryReactionData_Type RegistryReactionData::REG_SZ;
const RegistryReactionData_Type RegistryReactionData::REG_MULTI_SZ;
const RegistryReactionData_Type RegistryReactionData::REG_EXPAND_SZ;
const RegistryReactionData_Type RegistryReactionData::REG_BINARY;
const RegistryReactionData_Type RegistryReactionData::REG_DWORD;
const RegistryReactionData_Type RegistryReactionData::REG_QWORD;
const RegistryReactionData_Type RegistryReactionData::Type_MIN;
const RegistryReactionData_Type RegistryReactionData::Type_MAX;
const int RegistryReactionData::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Tactic_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ReactionData_2eproto);
  return file_level_enum_descriptors_ReactionData_2eproto[1];
}
bool Tactic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataSource_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ReactionData_2eproto);
  return file_level_enum_descriptors_ReactionData_2eproto[2];
}
bool DataSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Category_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ReactionData_2eproto);
  return file_level_enum_descriptors_ReactionData_2eproto[3];
}
bool Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Aggressiveness_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ReactionData_2eproto);
  return file_level_enum_descriptors_ReactionData_2eproto[4];
}
bool Aggressiveness_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ACLEntry::InitAsDefaultInstance() {
}
class ACLEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACLEntry::kUserFieldNumber;
const int ACLEntry::kGroupFieldNumber;
const int ACLEntry::kSecurityAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACLEntry::ACLEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.ACLEntry)
}
ACLEntry::ACLEntry(const ACLEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  securityattributes_ = from.securityattributes_;
  // @@protoc_insertion_point(copy_constructor:gpb.ACLEntry)
}

void ACLEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ACLEntry_ReactionData_2eproto.base);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityattributes_ = 0u;
}

ACLEntry::~ACLEntry() {
  // @@protoc_insertion_point(destructor:gpb.ACLEntry)
  SharedDtor();
}

void ACLEntry::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ACLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ACLEntry& ACLEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ACLEntry_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void ACLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.ACLEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityattributes_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ACLEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ACLEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ACLEntry.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string group = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ACLEntry.group");
        object = msg->mutable_group();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 securityAttributes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_securityattributes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ACLEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.ACLEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ACLEntry.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ACLEntry.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 securityAttributes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securityattributes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.ACLEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.ACLEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ACLEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.ACLEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ACLEntry.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // string group = 2;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ACLEntry.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group(), output);
  }

  // uint32 securityAttributes = 3;
  if (this->securityattributes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->securityattributes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.ACLEntry)
}

::google::protobuf::uint8* ACLEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.ACLEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ACLEntry.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // string group = 2;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ACLEntry.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group(), target);
  }

  // uint32 securityAttributes = 3;
  if (this->securityattributes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->securityattributes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.ACLEntry)
  return target;
}

size_t ACLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.ACLEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string group = 2;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // uint32 securityAttributes = 3;
  if (this->securityattributes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->securityattributes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACLEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.ACLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ACLEntry* source =
      ::google::protobuf::DynamicCastToGenerated<ACLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.ACLEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.ACLEntry)
    MergeFrom(*source);
  }
}

void ACLEntry::MergeFrom(const ACLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.ACLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.securityattributes() != 0) {
    set_securityattributes(from.securityattributes());
  }
}

void ACLEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.ACLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACLEntry::CopyFrom(const ACLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.ACLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACLEntry::IsInitialized() const {
  return true;
}

void ACLEntry::Swap(ACLEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACLEntry::InternalSwap(ACLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(securityattributes_, other->securityattributes_);
}

::google::protobuf::Metadata ACLEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileReactionData_Signature::InitAsDefaultInstance() {
}
class FileReactionData_Signature::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileReactionData_Signature::kSignerNameFieldNumber;
const int FileReactionData_Signature::kDigestAlgorithmFieldNumber;
const int FileReactionData_Signature::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileReactionData_Signature::FileReactionData_Signature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.FileReactionData.Signature)
}
FileReactionData_Signature::FileReactionData_Signature(const FileReactionData_Signature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signername().size() > 0) {
    signername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signername_);
  }
  digestalgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.digestalgorithm().size() > 0) {
    digestalgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digestalgorithm_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:gpb.FileReactionData.Signature)
}

void FileReactionData_Signature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileReactionData_Signature_ReactionData_2eproto.base);
  signername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digestalgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

FileReactionData_Signature::~FileReactionData_Signature() {
  // @@protoc_insertion_point(destructor:gpb.FileReactionData.Signature)
  SharedDtor();
}

void FileReactionData_Signature::SharedDtor() {
  signername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digestalgorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileReactionData_Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileReactionData_Signature& FileReactionData_Signature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileReactionData_Signature_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void FileReactionData_Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.FileReactionData.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digestalgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileReactionData_Signature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileReactionData_Signature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string signerName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.FileReactionData.Signature.signerName");
        object = msg->mutable_signername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string digestAlgorithm = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.FileReactionData.Signature.digestAlgorithm");
        object = msg->mutable_digestalgorithm();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileReactionData_Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.FileReactionData.Signature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signerName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signername().data(), static_cast<int>(this->signername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.FileReactionData.Signature.signerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string digestAlgorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digestalgorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->digestalgorithm().data(), static_cast<int>(this->digestalgorithm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.FileReactionData.Signature.digestAlgorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.FileReactionData.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.FileReactionData.Signature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileReactionData_Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.FileReactionData.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signerName = 1;
  if (this->signername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signername().data(), static_cast<int>(this->signername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.Signature.signerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signername(), output);
  }

  // string digestAlgorithm = 2;
  if (this->digestalgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->digestalgorithm().data(), static_cast<int>(this->digestalgorithm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.Signature.digestAlgorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->digestalgorithm(), output);
  }

  // uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.FileReactionData.Signature)
}

::google::protobuf::uint8* FileReactionData_Signature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.FileReactionData.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signerName = 1;
  if (this->signername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signername().data(), static_cast<int>(this->signername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.Signature.signerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signername(), target);
  }

  // string digestAlgorithm = 2;
  if (this->digestalgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->digestalgorithm().data(), static_cast<int>(this->digestalgorithm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.Signature.digestAlgorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->digestalgorithm(), target);
  }

  // uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.FileReactionData.Signature)
  return target;
}

size_t FileReactionData_Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.FileReactionData.Signature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signerName = 1;
  if (this->signername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signername());
  }

  // string digestAlgorithm = 2;
  if (this->digestalgorithm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->digestalgorithm());
  }

  // uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileReactionData_Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.FileReactionData.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const FileReactionData_Signature* source =
      ::google::protobuf::DynamicCastToGenerated<FileReactionData_Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.FileReactionData.Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.FileReactionData.Signature)
    MergeFrom(*source);
  }
}

void FileReactionData_Signature::MergeFrom(const FileReactionData_Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.FileReactionData.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signername().size() > 0) {

    signername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signername_);
  }
  if (from.digestalgorithm().size() > 0) {

    digestalgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digestalgorithm_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FileReactionData_Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.FileReactionData.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileReactionData_Signature::CopyFrom(const FileReactionData_Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.FileReactionData.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileReactionData_Signature::IsInitialized() const {
  return true;
}

void FileReactionData_Signature::Swap(FileReactionData_Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileReactionData_Signature::InternalSwap(FileReactionData_Signature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signername_.Swap(&other->signername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  digestalgorithm_.Swap(&other->digestalgorithm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata FileReactionData_Signature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileReactionData::InitAsDefaultInstance() {
}
class FileReactionData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileReactionData::kMitreIDFieldNumber;
const int FileReactionData::kFileNameFieldNumber;
const int FileReactionData::kDescriptionFieldNumber;
const int FileReactionData::kOwnerFieldNumber;
const int FileReactionData::kSizeFieldNumber;
const int FileReactionData::kTimeCreatedFieldNumber;
const int FileReactionData::kTimeModifiedFieldNumber;
const int FileReactionData::kTimeAccessedFieldNumber;
const int FileReactionData::kFileContentsFieldNumber;
const int FileReactionData::kSignaturesFieldNumber;
const int FileReactionData::kACLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileReactionData::FileReactionData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.FileReactionData)
}
FileReactionData::FileReactionData(const FileReactionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      signatures_(from.signatures_),
      acl_(from.acl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner().size() > 0) {
    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  filecontents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filecontents().size() > 0) {
    filecontents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filecontents_);
  }
  ::memcpy(&mitreid_, &from.mitreid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeaccessed_) -
    reinterpret_cast<char*>(&mitreid_)) + sizeof(timeaccessed_));
  // @@protoc_insertion_point(copy_constructor:gpb.FileReactionData)
}

void FileReactionData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileReactionData_ReactionData_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filecontents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeaccessed_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(timeaccessed_));
}

FileReactionData::~FileReactionData() {
  // @@protoc_insertion_point(destructor:gpb.FileReactionData)
  SharedDtor();
}

void FileReactionData::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filecontents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileReactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileReactionData& FileReactionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileReactionData_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void FileReactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.FileReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  acl_.Clear();
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filecontents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeaccessed_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(timeaccessed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileReactionData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileReactionData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mitreid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string fileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.FileReactionData.fileName");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.FileReactionData.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string owner = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.FileReactionData.owner");
        object = msg->mutable_owner();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 size = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 timeCreated = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_timecreated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 timeModified = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_timemodified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 timeAccessed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_timeaccessed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes fileContents = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_filecontents();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .gpb.FileReactionData.Signature signatures = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::FileReactionData_Signature::_InternalParse;
          object = msg->add_signatures();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .gpb.ACLEntry ACL = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::ACLEntry::_InternalParse;
          object = msg->add_acl();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileReactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.FileReactionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.FileReactionData.fileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.FileReactionData.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), static_cast<int>(this->owner().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.FileReactionData.owner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeCreated = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timecreated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeModified = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timemodified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeAccessed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeaccessed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes fileContents = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filecontents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.FileReactionData.Signature signatures = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.ACLEntry ACL = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.FileReactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.FileReactionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileReactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.FileReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mitreid(), output);
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->owner(), output);
  }

  // uint32 size = 5;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->size(), output);
  }

  // uint32 timeCreated = 6;
  if (this->timecreated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timecreated(), output);
  }

  // uint32 timeModified = 7;
  if (this->timemodified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timemodified(), output);
  }

  // uint32 timeAccessed = 8;
  if (this->timeaccessed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timeaccessed(), output);
  }

  // bytes fileContents = 9;
  if (this->filecontents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->filecontents(), output);
  }

  // repeated .gpb.FileReactionData.Signature signatures = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signatures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->signatures(static_cast<int>(i)),
      output);
  }

  // repeated .gpb.ACLEntry ACL = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acl_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->acl(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.FileReactionData)
}

::google::protobuf::uint8* FileReactionData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.FileReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mitreid(), target);
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.FileReactionData.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->owner(), target);
  }

  // uint32 size = 5;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->size(), target);
  }

  // uint32 timeCreated = 6;
  if (this->timecreated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timecreated(), target);
  }

  // uint32 timeModified = 7;
  if (this->timemodified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timemodified(), target);
  }

  // uint32 timeAccessed = 8;
  if (this->timeaccessed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timeaccessed(), target);
  }

  // bytes fileContents = 9;
  if (this->filecontents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->filecontents(), target);
  }

  // repeated .gpb.FileReactionData.Signature signatures = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signatures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->signatures(static_cast<int>(i)), target);
  }

  // repeated .gpb.ACLEntry ACL = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acl_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->acl(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.FileReactionData)
  return target;
}

size_t FileReactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.FileReactionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpb.FileReactionData.Signature signatures = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->signatures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signatures(static_cast<int>(i)));
    }
  }

  // repeated .gpb.ACLEntry ACL = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->acl_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acl(static_cast<int>(i)));
    }
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // bytes fileContents = 9;
  if (this->filecontents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->filecontents());
  }

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mitreid());
  }

  // uint32 size = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint32 timeCreated = 6;
  if (this->timecreated() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timecreated());
  }

  // uint32 timeModified = 7;
  if (this->timemodified() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timemodified());
  }

  // uint32 timeAccessed = 8;
  if (this->timeaccessed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeaccessed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileReactionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.FileReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const FileReactionData* source =
      ::google::protobuf::DynamicCastToGenerated<FileReactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.FileReactionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.FileReactionData)
    MergeFrom(*source);
  }
}

void FileReactionData::MergeFrom(const FileReactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.FileReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  acl_.MergeFrom(from.acl_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.filecontents().size() > 0) {

    filecontents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filecontents_);
  }
  if (from.mitreid() != 0) {
    set_mitreid(from.mitreid());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.timecreated() != 0) {
    set_timecreated(from.timecreated());
  }
  if (from.timemodified() != 0) {
    set_timemodified(from.timemodified());
  }
  if (from.timeaccessed() != 0) {
    set_timeaccessed(from.timeaccessed());
  }
}

void FileReactionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.FileReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileReactionData::CopyFrom(const FileReactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.FileReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileReactionData::IsInitialized() const {
  return true;
}

void FileReactionData::Swap(FileReactionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileReactionData::InternalSwap(FileReactionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signatures_)->InternalSwap(CastToBase(&other->signatures_));
  CastToBase(&acl_)->InternalSwap(CastToBase(&other->acl_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_.Swap(&other->owner_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filecontents_.Swap(&other->filecontents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mitreid_, other->mitreid_);
  swap(size_, other->size_);
  swap(timecreated_, other->timecreated_);
  swap(timemodified_, other->timemodified_);
  swap(timeaccessed_, other->timeaccessed_);
}

::google::protobuf::Metadata FileReactionData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegistryReactionData::InitAsDefaultInstance() {
}
class RegistryReactionData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegistryReactionData::kMitreIDFieldNumber;
const int RegistryReactionData::kKeyFieldNumber;
const int RegistryReactionData::kDataFieldNumber;
const int RegistryReactionData::kNewDataFieldNumber;
const int RegistryReactionData::kTypeFieldNumber;
const int RegistryReactionData::kACLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegistryReactionData::RegistryReactionData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.RegistryReactionData)
}
RegistryReactionData::RegistryReactionData(const RegistryReactionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      acl_(from.acl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  newdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.newdata().size() > 0) {
    newdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newdata_);
  }
  ::memcpy(&mitreid_, &from.mitreid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&mitreid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gpb.RegistryReactionData)
}

void RegistryReactionData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegistryReactionData_ReactionData_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(type_));
}

RegistryReactionData::~RegistryReactionData() {
  // @@protoc_insertion_point(destructor:gpb.RegistryReactionData)
  SharedDtor();
}

void RegistryReactionData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegistryReactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistryReactionData& RegistryReactionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegistryReactionData_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void RegistryReactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.RegistryReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acl_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegistryReactionData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegistryReactionData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mitreid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.RegistryReactionData.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes newData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_newdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .gpb.RegistryReactionData.Type type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::gpb::RegistryReactionData_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .gpb.ACLEntry ACL = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::ACLEntry::_InternalParse;
          object = msg->add_acl();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegistryReactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.RegistryReactionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.RegistryReactionData.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes newData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_newdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gpb.RegistryReactionData.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gpb::RegistryReactionData_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.ACLEntry ACL = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.RegistryReactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.RegistryReactionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegistryReactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.RegistryReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mitreid(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.RegistryReactionData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // bytes newData = 4;
  if (this->newdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->newdata(), output);
  }

  // .gpb.RegistryReactionData.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .gpb.ACLEntry ACL = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acl_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->acl(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.RegistryReactionData)
}

::google::protobuf::uint8* RegistryReactionData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.RegistryReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mitreid(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.RegistryReactionData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // bytes newData = 4;
  if (this->newdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->newdata(), target);
  }

  // .gpb.RegistryReactionData.Type type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .gpb.ACLEntry ACL = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acl_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->acl(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.RegistryReactionData)
  return target;
}

size_t RegistryReactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.RegistryReactionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpb.ACLEntry ACL = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->acl_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acl(static_cast<int>(i)));
    }
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes newData = 4;
  if (this->newdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->newdata());
  }

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mitreid());
  }

  // .gpb.RegistryReactionData.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistryReactionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.RegistryReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistryReactionData* source =
      ::google::protobuf::DynamicCastToGenerated<RegistryReactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.RegistryReactionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.RegistryReactionData)
    MergeFrom(*source);
  }
}

void RegistryReactionData::MergeFrom(const RegistryReactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.RegistryReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acl_.MergeFrom(from.acl_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.newdata().size() > 0) {

    newdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newdata_);
  }
  if (from.mitreid() != 0) {
    set_mitreid(from.mitreid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RegistryReactionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.RegistryReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistryReactionData::CopyFrom(const RegistryReactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.RegistryReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryReactionData::IsInitialized() const {
  return true;
}

void RegistryReactionData::Swap(RegistryReactionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegistryReactionData::InternalSwap(RegistryReactionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&acl_)->InternalSwap(CastToBase(&other->acl_));
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newdata_.Swap(&other->newdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mitreid_, other->mitreid_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata RegistryReactionData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProcessReactionData::InitAsDefaultInstance() {
}
class ProcessReactionData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessReactionData::kMitreIDFieldNumber;
const int ProcessReactionData::kPidFieldNumber;
const int ProcessReactionData::kNameFieldNumber;
const int ProcessReactionData::kDescriptionFieldNumber;
const int ProcessReactionData::kCommandLineFieldNumber;
const int ProcessReactionData::kPathFieldNumber;
const int ProcessReactionData::kCurrentDirectoryFieldNumber;
const int ProcessReactionData::kAutostartLocationFieldNumber;
const int ProcessReactionData::kParentFieldNumber;
const int ProcessReactionData::kUserFieldNumber;
const int ProcessReactionData::kTimeStartedFieldNumber;
const int ProcessReactionData::kRecievedBytesFieldNumber;
const int ProcessReactionData::kSentBytesFieldNumber;
const int ProcessReactionData::kPrivateBytesFieldNumber;
const int ProcessReactionData::kWorkingSetFieldNumber;
const int ProcessReactionData::kBinaryContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessReactionData::ProcessReactionData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.ProcessReactionData)
}
ProcessReactionData::ProcessReactionData(const ProcessReactionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  commandline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commandline().size() > 0) {
    commandline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commandline_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  currentdirectory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currentdirectory().size() > 0) {
    currentdirectory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currentdirectory_);
  }
  autostartlocation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.autostartlocation().size() > 0) {
    autostartlocation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autostartlocation_);
  }
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  binarycontents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binarycontents().size() > 0) {
    binarycontents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binarycontents_);
  }
  ::memcpy(&mitreid_, &from.mitreid_,
    static_cast<size_t>(reinterpret_cast<char*>(&workingset_) -
    reinterpret_cast<char*>(&mitreid_)) + sizeof(workingset_));
  // @@protoc_insertion_point(copy_constructor:gpb.ProcessReactionData)
}

void ProcessReactionData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProcessReactionData_ReactionData_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commandline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currentdirectory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autostartlocation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarycontents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workingset_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(workingset_));
}

ProcessReactionData::~ProcessReactionData() {
  // @@protoc_insertion_point(destructor:gpb.ProcessReactionData)
  SharedDtor();
}

void ProcessReactionData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commandline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currentdirectory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autostartlocation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarycontents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProcessReactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessReactionData& ProcessReactionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProcessReactionData_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void ProcessReactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.ProcessReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commandline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currentdirectory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autostartlocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarycontents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workingset_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(workingset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessReactionData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProcessReactionData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mitreid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commandLine = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.commandLine");
        object = msg->mutable_commandline();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currentDirectory = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.currentDirectory");
        object = msg->mutable_currentdirectory();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string autostartLocation = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.autostartLocation");
        object = msg->mutable_autostartlocation();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string parent = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ProcessReactionData.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 timeStarted = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_timestarted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 recievedBytes = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_recievedbytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 sentBytes = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_sentbytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 privateBytes = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_privatebytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 workingSet = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_workingset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes binaryContents = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_binarycontents();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessReactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.ProcessReactionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commandLine = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commandline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commandline().data(), static_cast<int>(this->commandline().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.commandLine"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currentDirectory = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentdirectory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currentdirectory().data(), static_cast<int>(this->currentdirectory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.currentDirectory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string autostartLocation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autostartlocation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->autostartlocation().data(), static_cast<int>(this->autostartlocation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.autostartLocation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ProcessReactionData.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeStarted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestarted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recievedBytes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recievedbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sentBytes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sentbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 privateBytes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privatebytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 workingSet = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workingset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes binaryContents = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binarycontents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.ProcessReactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.ProcessReactionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessReactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.ProcessReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mitreid(), output);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // string commandLine = 5;
  if (this->commandline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commandline().data(), static_cast<int>(this->commandline().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.commandLine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->commandline(), output);
  }

  // string path = 6;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->path(), output);
  }

  // string currentDirectory = 7;
  if (this->currentdirectory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currentdirectory().data(), static_cast<int>(this->currentdirectory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.currentDirectory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->currentdirectory(), output);
  }

  // string autostartLocation = 8;
  if (this->autostartlocation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->autostartlocation().data(), static_cast<int>(this->autostartlocation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.autostartLocation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->autostartlocation(), output);
  }

  // string parent = 9;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->parent(), output);
  }

  // string user = 10;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->user(), output);
  }

  // uint32 timeStarted = 11;
  if (this->timestarted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->timestarted(), output);
  }

  // uint32 recievedBytes = 12;
  if (this->recievedbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->recievedbytes(), output);
  }

  // uint32 sentBytes = 13;
  if (this->sentbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sentbytes(), output);
  }

  // uint32 privateBytes = 14;
  if (this->privatebytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->privatebytes(), output);
  }

  // uint32 workingSet = 15;
  if (this->workingset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->workingset(), output);
  }

  // bytes binaryContents = 16;
  if (this->binarycontents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->binarycontents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.ProcessReactionData)
}

::google::protobuf::uint8* ProcessReactionData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.ProcessReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mitreid(), target);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // string commandLine = 5;
  if (this->commandline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commandline().data(), static_cast<int>(this->commandline().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.commandLine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commandline(), target);
  }

  // string path = 6;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->path(), target);
  }

  // string currentDirectory = 7;
  if (this->currentdirectory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currentdirectory().data(), static_cast<int>(this->currentdirectory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.currentDirectory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->currentdirectory(), target);
  }

  // string autostartLocation = 8;
  if (this->autostartlocation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->autostartlocation().data(), static_cast<int>(this->autostartlocation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.autostartLocation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->autostartlocation(), target);
  }

  // string parent = 9;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->parent(), target);
  }

  // string user = 10;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ProcessReactionData.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->user(), target);
  }

  // uint32 timeStarted = 11;
  if (this->timestarted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->timestarted(), target);
  }

  // uint32 recievedBytes = 12;
  if (this->recievedbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->recievedbytes(), target);
  }

  // uint32 sentBytes = 13;
  if (this->sentbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sentbytes(), target);
  }

  // uint32 privateBytes = 14;
  if (this->privatebytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->privatebytes(), target);
  }

  // uint32 workingSet = 15;
  if (this->workingset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->workingset(), target);
  }

  // bytes binaryContents = 16;
  if (this->binarycontents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->binarycontents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.ProcessReactionData)
  return target;
}

size_t ProcessReactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.ProcessReactionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string commandLine = 5;
  if (this->commandline().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commandline());
  }

  // string path = 6;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string currentDirectory = 7;
  if (this->currentdirectory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currentdirectory());
  }

  // string autostartLocation = 8;
  if (this->autostartlocation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->autostartlocation());
  }

  // string parent = 9;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string user = 10;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // bytes binaryContents = 16;
  if (this->binarycontents().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->binarycontents());
  }

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mitreid());
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  // uint32 timeStarted = 11;
  if (this->timestarted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestarted());
  }

  // uint32 recievedBytes = 12;
  if (this->recievedbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recievedbytes());
  }

  // uint32 sentBytes = 13;
  if (this->sentbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentbytes());
  }

  // uint32 privateBytes = 14;
  if (this->privatebytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->privatebytes());
  }

  // uint32 workingSet = 15;
  if (this->workingset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->workingset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessReactionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.ProcessReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessReactionData* source =
      ::google::protobuf::DynamicCastToGenerated<ProcessReactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.ProcessReactionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.ProcessReactionData)
    MergeFrom(*source);
  }
}

void ProcessReactionData::MergeFrom(const ProcessReactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.ProcessReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.commandline().size() > 0) {

    commandline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commandline_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.currentdirectory().size() > 0) {

    currentdirectory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currentdirectory_);
  }
  if (from.autostartlocation().size() > 0) {

    autostartlocation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autostartlocation_);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.binarycontents().size() > 0) {

    binarycontents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binarycontents_);
  }
  if (from.mitreid() != 0) {
    set_mitreid(from.mitreid());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.timestarted() != 0) {
    set_timestarted(from.timestarted());
  }
  if (from.recievedbytes() != 0) {
    set_recievedbytes(from.recievedbytes());
  }
  if (from.sentbytes() != 0) {
    set_sentbytes(from.sentbytes());
  }
  if (from.privatebytes() != 0) {
    set_privatebytes(from.privatebytes());
  }
  if (from.workingset() != 0) {
    set_workingset(from.workingset());
  }
}

void ProcessReactionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.ProcessReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessReactionData::CopyFrom(const ProcessReactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.ProcessReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReactionData::IsInitialized() const {
  return true;
}

void ProcessReactionData::Swap(ProcessReactionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessReactionData::InternalSwap(ProcessReactionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commandline_.Swap(&other->commandline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currentdirectory_.Swap(&other->currentdirectory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  autostartlocation_.Swap(&other->autostartlocation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  binarycontents_.Swap(&other->binarycontents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mitreid_, other->mitreid_);
  swap(pid_, other->pid_);
  swap(timestarted_, other->timestarted_);
  swap(recievedbytes_, other->recievedbytes_);
  swap(sentbytes_, other->sentbytes_);
  swap(privatebytes_, other->privatebytes_);
  swap(workingset_, other->workingset_);
}

::google::protobuf::Metadata ProcessReactionData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServiceReactionData::InitAsDefaultInstance() {
}
class ServiceReactionData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceReactionData::kMitreIDFieldNumber;
const int ServiceReactionData::kPidFieldNumber;
const int ServiceReactionData::kNameFieldNumber;
const int ServiceReactionData::kDescriptionFieldNumber;
const int ServiceReactionData::kLogOnAsFieldNumber;
const int ServiceReactionData::kStartupTypeFieldNumber;
const int ServiceReactionData::kStartParametersFieldNumber;
const int ServiceReactionData::kAllowDesktopInteractFieldNumber;
const int ServiceReactionData::kRunProgramPathFieldNumber;
const int ServiceReactionData::kBinaryPathFieldNumber;
const int ServiceReactionData::kBinaryContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceReactionData::ServiceReactionData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.ServiceReactionData)
}
ServiceReactionData::ServiceReactionData(const ServiceReactionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  logonas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logonas().size() > 0) {
    logonas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logonas_);
  }
  startuptype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.startuptype().size() > 0) {
    startuptype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startuptype_);
  }
  startparameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.startparameters().size() > 0) {
    startparameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startparameters_);
  }
  runprogrampath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runprogrampath().size() > 0) {
    runprogrampath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runprogrampath_);
  }
  binarypath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binarypath().size() > 0) {
    binarypath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binarypath_);
  }
  binarycontents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binarycontents().size() > 0) {
    binarycontents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binarycontents_);
  }
  ::memcpy(&mitreid_, &from.mitreid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowdesktopinteract_) -
    reinterpret_cast<char*>(&mitreid_)) + sizeof(allowdesktopinteract_));
  // @@protoc_insertion_point(copy_constructor:gpb.ServiceReactionData)
}

void ServiceReactionData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServiceReactionData_ReactionData_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logonas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startuptype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startparameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runprogrampath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarypath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarycontents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowdesktopinteract_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(allowdesktopinteract_));
}

ServiceReactionData::~ServiceReactionData() {
  // @@protoc_insertion_point(destructor:gpb.ServiceReactionData)
  SharedDtor();
}

void ServiceReactionData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logonas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startuptype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startparameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runprogrampath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarypath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarycontents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceReactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceReactionData& ServiceReactionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServiceReactionData_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void ServiceReactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.ServiceReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logonas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startuptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startparameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runprogrampath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarypath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarycontents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mitreid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowdesktopinteract_) -
      reinterpret_cast<char*>(&mitreid_)) + sizeof(allowdesktopinteract_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceReactionData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServiceReactionData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mitreid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string logOnAs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.logOnAs");
        object = msg->mutable_logonas();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string startupType = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.startupType");
        object = msg->mutable_startuptype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string startParameters = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.startParameters");
        object = msg->mutable_startparameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool allowDesktopInteract = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_allowdesktopinteract(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string runProgramPath = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.runProgramPath");
        object = msg->mutable_runprogrampath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string binaryPath = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.ServiceReactionData.binaryPath");
        object = msg->mutable_binarypath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes binaryContents = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_binarycontents();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceReactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.ServiceReactionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mitreID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logOnAs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logonas()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logonas().data(), static_cast<int>(this->logonas().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.logOnAs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string startupType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startuptype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->startuptype().data(), static_cast<int>(this->startuptype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.startupType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string startParameters = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startparameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->startparameters().data(), static_cast<int>(this->startparameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.startParameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allowDesktopInteract = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowdesktopinteract_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runProgramPath = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runprogrampath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runprogrampath().data(), static_cast<int>(this->runprogrampath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.runProgramPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string binaryPath = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binarypath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->binarypath().data(), static_cast<int>(this->binarypath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.ServiceReactionData.binaryPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes binaryContents = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binarycontents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.ServiceReactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.ServiceReactionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceReactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.ServiceReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mitreid(), output);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // string logOnAs = 5;
  if (this->logonas().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logonas().data(), static_cast<int>(this->logonas().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.logOnAs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->logonas(), output);
  }

  // string startupType = 6;
  if (this->startuptype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startuptype().data(), static_cast<int>(this->startuptype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.startupType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->startuptype(), output);
  }

  // string startParameters = 7;
  if (this->startparameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startparameters().data(), static_cast<int>(this->startparameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.startParameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->startparameters(), output);
  }

  // bool allowDesktopInteract = 8;
  if (this->allowdesktopinteract() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allowdesktopinteract(), output);
  }

  // string runProgramPath = 9;
  if (this->runprogrampath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runprogrampath().data(), static_cast<int>(this->runprogrampath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.runProgramPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->runprogrampath(), output);
  }

  // string binaryPath = 10;
  if (this->binarypath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binarypath().data(), static_cast<int>(this->binarypath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.binaryPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->binarypath(), output);
  }

  // bytes binaryContents = 11;
  if (this->binarycontents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->binarycontents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.ServiceReactionData)
}

::google::protobuf::uint8* ServiceReactionData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.ServiceReactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mitreid(), target);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // string logOnAs = 5;
  if (this->logonas().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logonas().data(), static_cast<int>(this->logonas().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.logOnAs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->logonas(), target);
  }

  // string startupType = 6;
  if (this->startuptype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startuptype().data(), static_cast<int>(this->startuptype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.startupType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->startuptype(), target);
  }

  // string startParameters = 7;
  if (this->startparameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startparameters().data(), static_cast<int>(this->startparameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.startParameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->startparameters(), target);
  }

  // bool allowDesktopInteract = 8;
  if (this->allowdesktopinteract() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allowdesktopinteract(), target);
  }

  // string runProgramPath = 9;
  if (this->runprogrampath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runprogrampath().data(), static_cast<int>(this->runprogrampath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.runProgramPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->runprogrampath(), target);
  }

  // string binaryPath = 10;
  if (this->binarypath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binarypath().data(), static_cast<int>(this->binarypath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.ServiceReactionData.binaryPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->binarypath(), target);
  }

  // bytes binaryContents = 11;
  if (this->binarycontents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->binarycontents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.ServiceReactionData)
  return target;
}

size_t ServiceReactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.ServiceReactionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string logOnAs = 5;
  if (this->logonas().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logonas());
  }

  // string startupType = 6;
  if (this->startuptype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startuptype());
  }

  // string startParameters = 7;
  if (this->startparameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startparameters());
  }

  // string runProgramPath = 9;
  if (this->runprogrampath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runprogrampath());
  }

  // string binaryPath = 10;
  if (this->binarypath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->binarypath());
  }

  // bytes binaryContents = 11;
  if (this->binarycontents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->binarycontents());
  }

  // uint32 mitreID = 1;
  if (this->mitreid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mitreid());
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  // bool allowDesktopInteract = 8;
  if (this->allowdesktopinteract() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceReactionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.ServiceReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceReactionData* source =
      ::google::protobuf::DynamicCastToGenerated<ServiceReactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.ServiceReactionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.ServiceReactionData)
    MergeFrom(*source);
  }
}

void ServiceReactionData::MergeFrom(const ServiceReactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.ServiceReactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.logonas().size() > 0) {

    logonas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logonas_);
  }
  if (from.startuptype().size() > 0) {

    startuptype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startuptype_);
  }
  if (from.startparameters().size() > 0) {

    startparameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startparameters_);
  }
  if (from.runprogrampath().size() > 0) {

    runprogrampath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runprogrampath_);
  }
  if (from.binarypath().size() > 0) {

    binarypath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binarypath_);
  }
  if (from.binarycontents().size() > 0) {

    binarycontents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binarycontents_);
  }
  if (from.mitreid() != 0) {
    set_mitreid(from.mitreid());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.allowdesktopinteract() != 0) {
    set_allowdesktopinteract(from.allowdesktopinteract());
  }
}

void ServiceReactionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.ServiceReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReactionData::CopyFrom(const ServiceReactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.ServiceReactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReactionData::IsInitialized() const {
  return true;
}

void ServiceReactionData::Swap(ServiceReactionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceReactionData::InternalSwap(ServiceReactionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logonas_.Swap(&other->logonas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  startuptype_.Swap(&other->startuptype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  startparameters_.Swap(&other->startparameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  runprogrampath_.Swap(&other->runprogrampath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  binarypath_.Swap(&other->binarypath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  binarycontents_.Swap(&other->binarycontents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mitreid_, other->mitreid_);
  swap(pid_, other->pid_);
  swap(allowdesktopinteract_, other->allowdesktopinteract_);
}

::google::protobuf::Metadata ServiceReactionData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HuntInfo::InitAsDefaultInstance() {
}
class HuntInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntInfo::kHuntNameFieldNumber;
const int HuntInfo::kHuntAggressivenessFieldNumber;
const int HuntInfo::kHuntTacticsFieldNumber;
const int HuntInfo::kHuntCategoriesFieldNumber;
const int HuntInfo::kHuntDatasourcesFieldNumber;
const int HuntInfo::kHuntStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntInfo::HuntInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.HuntInfo)
}
HuntInfo::HuntInfo(const HuntInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      hunttactics_(from.hunttactics_),
      huntcategories_(from.huntcategories_),
      huntdatasources_(from.huntdatasources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  huntname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.huntname().size() > 0) {
    huntname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.huntname_);
  }
  ::memcpy(&huntaggressiveness_, &from.huntaggressiveness_,
    static_cast<size_t>(reinterpret_cast<char*>(&huntstarttime_) -
    reinterpret_cast<char*>(&huntaggressiveness_)) + sizeof(huntstarttime_));
  // @@protoc_insertion_point(copy_constructor:gpb.HuntInfo)
}

void HuntInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HuntInfo_ReactionData_2eproto.base);
  huntname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&huntaggressiveness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&huntstarttime_) -
      reinterpret_cast<char*>(&huntaggressiveness_)) + sizeof(huntstarttime_));
}

HuntInfo::~HuntInfo() {
  // @@protoc_insertion_point(destructor:gpb.HuntInfo)
  SharedDtor();
}

void HuntInfo::SharedDtor() {
  huntname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HuntInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HuntInfo& HuntInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HuntInfo_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void HuntInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.HuntInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hunttactics_.Clear();
  huntcategories_.Clear();
  huntdatasources_.Clear();
  huntname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&huntaggressiveness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&huntstarttime_) -
      reinterpret_cast<char*>(&huntaggressiveness_)) + sizeof(huntstarttime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HuntInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HuntInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string huntName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.HuntInfo.huntName");
        object = msg->mutable_huntname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .gpb.Aggressiveness huntAggressiveness = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_huntaggressiveness(static_cast<::gpb::Aggressiveness>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .gpb.Tactic huntTactics = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_hunttactics();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_hunttactics(static_cast<::gpb::Tactic>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated .gpb.Category huntCategories = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_huntcategories();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_huntcategories(static_cast<::gpb::Category>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // repeated .gpb.DataSource huntDatasources = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_huntdatasources();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_huntdatasources(static_cast<::gpb::DataSource>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // uint32 huntStartTime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_huntstarttime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HuntInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.HuntInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string huntName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_huntname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->huntname().data(), static_cast<int>(this->huntname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.HuntInfo.huntName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gpb.Aggressiveness huntAggressiveness = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_huntaggressiveness(static_cast< ::gpb::Aggressiveness >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.Tactic huntTactics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_hunttactics(static_cast< ::gpb::Tactic >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_hunttactics(static_cast< ::gpb::Tactic >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.Category huntCategories = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_huntcategories(static_cast< ::gpb::Category >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_huntcategories(static_cast< ::gpb::Category >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.DataSource huntDatasources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_huntdatasources(static_cast< ::gpb::DataSource >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_huntdatasources(static_cast< ::gpb::DataSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 huntStartTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &huntstarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.HuntInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.HuntInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HuntInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.HuntInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string huntName = 1;
  if (this->huntname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->huntname().data(), static_cast<int>(this->huntname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.HuntInfo.huntName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->huntname(), output);
  }

  // .gpb.Aggressiveness huntAggressiveness = 2;
  if (this->huntaggressiveness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->huntaggressiveness(), output);
  }

  // repeated .gpb.Tactic huntTactics = 3;
  if (this->hunttactics_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_hunttactics_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->hunttactics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->hunttactics(i), output);
  }

  // repeated .gpb.Category huntCategories = 4;
  if (this->huntcategories_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_huntcategories_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->huntcategories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->huntcategories(i), output);
  }

  // repeated .gpb.DataSource huntDatasources = 5;
  if (this->huntdatasources_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_huntdatasources_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->huntdatasources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->huntdatasources(i), output);
  }

  // uint32 huntStartTime = 6;
  if (this->huntstarttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->huntstarttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.HuntInfo)
}

::google::protobuf::uint8* HuntInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.HuntInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string huntName = 1;
  if (this->huntname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->huntname().data(), static_cast<int>(this->huntname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.HuntInfo.huntName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->huntname(), target);
  }

  // .gpb.Aggressiveness huntAggressiveness = 2;
  if (this->huntaggressiveness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->huntaggressiveness(), target);
  }

  // repeated .gpb.Tactic huntTactics = 3;
  if (this->hunttactics_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _hunttactics_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->hunttactics_, target);
  }

  // repeated .gpb.Category huntCategories = 4;
  if (this->huntcategories_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _huntcategories_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->huntcategories_, target);
  }

  // repeated .gpb.DataSource huntDatasources = 5;
  if (this->huntdatasources_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _huntdatasources_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->huntdatasources_, target);
  }

  // uint32 huntStartTime = 6;
  if (this->huntstarttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->huntstarttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.HuntInfo)
  return target;
}

size_t HuntInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.HuntInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpb.Tactic huntTactics = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->hunttactics_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->hunttactics(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _hunttactics_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .gpb.Category huntCategories = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->huntcategories_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->huntcategories(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _huntcategories_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .gpb.DataSource huntDatasources = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->huntdatasources_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->huntdatasources(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _huntdatasources_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string huntName = 1;
  if (this->huntname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->huntname());
  }

  // .gpb.Aggressiveness huntAggressiveness = 2;
  if (this->huntaggressiveness() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->huntaggressiveness());
  }

  // uint32 huntStartTime = 6;
  if (this->huntstarttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->huntstarttime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.HuntInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntInfo* source =
      ::google::protobuf::DynamicCastToGenerated<HuntInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.HuntInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.HuntInfo)
    MergeFrom(*source);
  }
}

void HuntInfo::MergeFrom(const HuntInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.HuntInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hunttactics_.MergeFrom(from.hunttactics_);
  huntcategories_.MergeFrom(from.huntcategories_);
  huntdatasources_.MergeFrom(from.huntdatasources_);
  if (from.huntname().size() > 0) {

    huntname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.huntname_);
  }
  if (from.huntaggressiveness() != 0) {
    set_huntaggressiveness(from.huntaggressiveness());
  }
  if (from.huntstarttime() != 0) {
    set_huntstarttime(from.huntstarttime());
  }
}

void HuntInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.HuntInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntInfo::CopyFrom(const HuntInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.HuntInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntInfo::IsInitialized() const {
  return true;
}

void HuntInfo::Swap(HuntInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntInfo::InternalSwap(HuntInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hunttactics_.InternalSwap(&other->hunttactics_);
  huntcategories_.InternalSwap(&other->huntcategories_);
  huntdatasources_.InternalSwap(&other->huntdatasources_);
  huntname_.Swap(&other->huntname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(huntaggressiveness_, other->huntaggressiveness_);
  swap(huntstarttime_, other->huntstarttime_);
}

::google::protobuf::Metadata HuntInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HuntMessage::InitAsDefaultInstance() {
  ::gpb::_HuntMessage_default_instance_._instance.get_mutable()->info_ = const_cast< ::gpb::HuntInfo*>(
      ::gpb::HuntInfo::internal_default_instance());
}
class HuntMessage::HasBitSetters {
 public:
  static const ::gpb::HuntInfo& info(const HuntMessage* msg);
};

const ::gpb::HuntInfo&
HuntMessage::HasBitSetters::info(const HuntMessage* msg) {
  return *msg->info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntMessage::kInfoFieldNumber;
const int HuntMessage::kExtraMessageFieldNumber;
const int HuntMessage::kFileDetectionsFieldNumber;
const int HuntMessage::kRegistryDetectionsFieldNumber;
const int HuntMessage::kProcessDetectionsFieldNumber;
const int HuntMessage::kServiceDetectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntMessage::HuntMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb.HuntMessage)
}
HuntMessage::HuntMessage(const HuntMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      filedetections_(from.filedetections_),
      registrydetections_(from.registrydetections_),
      processdetections_(from.processdetections_),
      servicedetections_(from.servicedetections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extramessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extramessage().size() > 0) {
    extramessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extramessage_);
  }
  if (from.has_info()) {
    info_ = new ::gpb::HuntInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gpb.HuntMessage)
}

void HuntMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HuntMessage_ReactionData_2eproto.base);
  extramessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = nullptr;
}

HuntMessage::~HuntMessage() {
  // @@protoc_insertion_point(destructor:gpb.HuntMessage)
  SharedDtor();
}

void HuntMessage::SharedDtor() {
  extramessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void HuntMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HuntMessage& HuntMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HuntMessage_ReactionData_2eproto.base);
  return *internal_default_instance();
}


void HuntMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb.HuntMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filedetections_.Clear();
  registrydetections_.Clear();
  processdetections_.Clear();
  servicedetections_.Clear();
  extramessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HuntMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HuntMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .gpb.HuntInfo info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::gpb::HuntInfo::_InternalParse;
        object = msg->mutable_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string extraMessage = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("gpb.HuntMessage.extraMessage");
        object = msg->mutable_extramessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .gpb.FileReactionData fileDetections = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::FileReactionData::_InternalParse;
          object = msg->add_filedetections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .gpb.RegistryReactionData registryDetections = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::RegistryReactionData::_InternalParse;
          object = msg->add_registrydetections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .gpb.ProcessReactionData processDetections = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::ProcessReactionData::_InternalParse;
          object = msg->add_processdetections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .gpb.ServiceReactionData serviceDetections = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::gpb::ServiceReactionData::_InternalParse;
          object = msg->add_servicedetections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HuntMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb.HuntMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gpb.HuntInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extraMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extramessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extramessage().data(), static_cast<int>(this->extramessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gpb.HuntMessage.extraMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.FileReactionData fileDetections = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_filedetections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.RegistryReactionData registryDetections = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_registrydetections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.ProcessReactionData processDetections = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_processdetections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gpb.ServiceReactionData serviceDetections = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servicedetections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb.HuntMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb.HuntMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HuntMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb.HuntMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gpb.HuntInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info(this), output);
  }

  // string extraMessage = 3;
  if (this->extramessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extramessage().data(), static_cast<int>(this->extramessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.HuntMessage.extraMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extramessage(), output);
  }

  // repeated .gpb.FileReactionData fileDetections = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filedetections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->filedetections(static_cast<int>(i)),
      output);
  }

  // repeated .gpb.RegistryReactionData registryDetections = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registrydetections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->registrydetections(static_cast<int>(i)),
      output);
  }

  // repeated .gpb.ProcessReactionData processDetections = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processdetections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->processdetections(static_cast<int>(i)),
      output);
  }

  // repeated .gpb.ServiceReactionData serviceDetections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servicedetections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->servicedetections(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb.HuntMessage)
}

::google::protobuf::uint8* HuntMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb.HuntMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gpb.HuntInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info(this), target);
  }

  // string extraMessage = 3;
  if (this->extramessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extramessage().data(), static_cast<int>(this->extramessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gpb.HuntMessage.extraMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extramessage(), target);
  }

  // repeated .gpb.FileReactionData fileDetections = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filedetections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->filedetections(static_cast<int>(i)), target);
  }

  // repeated .gpb.RegistryReactionData registryDetections = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registrydetections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->registrydetections(static_cast<int>(i)), target);
  }

  // repeated .gpb.ProcessReactionData processDetections = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processdetections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->processdetections(static_cast<int>(i)), target);
  }

  // repeated .gpb.ServiceReactionData serviceDetections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servicedetections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->servicedetections(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb.HuntMessage)
  return target;
}

size_t HuntMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpb.HuntMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpb.FileReactionData fileDetections = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->filedetections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filedetections(static_cast<int>(i)));
    }
  }

  // repeated .gpb.RegistryReactionData registryDetections = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->registrydetections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->registrydetections(static_cast<int>(i)));
    }
  }

  // repeated .gpb.ProcessReactionData processDetections = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->processdetections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->processdetections(static_cast<int>(i)));
    }
  }

  // repeated .gpb.ServiceReactionData serviceDetections = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->servicedetections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servicedetections(static_cast<int>(i)));
    }
  }

  // string extraMessage = 3;
  if (this->extramessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extramessage());
  }

  // .gpb.HuntInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb.HuntMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntMessage* source =
      ::google::protobuf::DynamicCastToGenerated<HuntMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb.HuntMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb.HuntMessage)
    MergeFrom(*source);
  }
}

void HuntMessage::MergeFrom(const HuntMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb.HuntMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filedetections_.MergeFrom(from.filedetections_);
  registrydetections_.MergeFrom(from.registrydetections_);
  processdetections_.MergeFrom(from.processdetections_);
  servicedetections_.MergeFrom(from.servicedetections_);
  if (from.extramessage().size() > 0) {

    extramessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extramessage_);
  }
  if (from.has_info()) {
    mutable_info()->::gpb::HuntInfo::MergeFrom(from.info());
  }
}

void HuntMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb.HuntMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntMessage::CopyFrom(const HuntMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb.HuntMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntMessage::IsInitialized() const {
  return true;
}

void HuntMessage::Swap(HuntMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntMessage::InternalSwap(HuntMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&filedetections_)->InternalSwap(CastToBase(&other->filedetections_));
  CastToBase(&registrydetections_)->InternalSwap(CastToBase(&other->registrydetections_));
  CastToBase(&processdetections_)->InternalSwap(CastToBase(&other->processdetections_));
  CastToBase(&servicedetections_)->InternalSwap(CastToBase(&other->servicedetections_));
  extramessage_.Swap(&other->extramessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
}

::google::protobuf::Metadata HuntMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ReactionData_2eproto);
  return ::file_level_metadata_ReactionData_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gpb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::gpb::ACLEntry* Arena::CreateMaybeMessage< ::gpb::ACLEntry >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::ACLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::FileReactionData_Signature* Arena::CreateMaybeMessage< ::gpb::FileReactionData_Signature >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::FileReactionData_Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::FileReactionData* Arena::CreateMaybeMessage< ::gpb::FileReactionData >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::FileReactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::RegistryReactionData* Arena::CreateMaybeMessage< ::gpb::RegistryReactionData >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::RegistryReactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::ProcessReactionData* Arena::CreateMaybeMessage< ::gpb::ProcessReactionData >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::ProcessReactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::ServiceReactionData* Arena::CreateMaybeMessage< ::gpb::ServiceReactionData >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::ServiceReactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::HuntInfo* Arena::CreateMaybeMessage< ::gpb::HuntInfo >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::HuntInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gpb::HuntMessage* Arena::CreateMaybeMessage< ::gpb::HuntMessage >(Arena* arena) {
  return Arena::CreateInternal< ::gpb::HuntMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
