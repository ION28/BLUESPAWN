// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ServerServices.proto

#include "ServerServices.pb.h"
#include "ServerServices.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Server_method_names[] = {
  "/Server/SendFileReaction",
  "/Server/SendRegistryReaction",
  "/Server/SendProcessReaction",
  "/Server/SendServiceReaction",
};

std::unique_ptr< Server::Stub> Server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Server::Stub> stub(new Server::Stub(channel));
  return stub;
}

Server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendFileReaction_(Server_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendRegistryReaction_(Server_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendProcessReaction_(Server_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendServiceReaction_(Server_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Server::Stub::SendFileReaction(::grpc::ClientContext* context, const ::FileReaction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendFileReaction_, context, request, response);
}

void Server::Stub::experimental_async::SendFileReaction(::grpc::ClientContext* context, const ::FileReaction* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendFileReaction_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::SendFileReaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendFileReaction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::AsyncSendFileReactionRaw(::grpc::ClientContext* context, const ::FileReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendFileReaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::PrepareAsyncSendFileReactionRaw(::grpc::ClientContext* context, const ::FileReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendFileReaction_, context, request, false);
}

::grpc::Status Server::Stub::SendRegistryReaction(::grpc::ClientContext* context, const ::RegistryReaction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRegistryReaction_, context, request, response);
}

void Server::Stub::experimental_async::SendRegistryReaction(::grpc::ClientContext* context, const ::RegistryReaction* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRegistryReaction_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::SendRegistryReaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRegistryReaction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::AsyncSendRegistryReactionRaw(::grpc::ClientContext* context, const ::RegistryReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendRegistryReaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::PrepareAsyncSendRegistryReactionRaw(::grpc::ClientContext* context, const ::RegistryReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendRegistryReaction_, context, request, false);
}

::grpc::Status Server::Stub::SendProcessReaction(::grpc::ClientContext* context, const ::ProcessReaction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendProcessReaction_, context, request, response);
}

void Server::Stub::experimental_async::SendProcessReaction(::grpc::ClientContext* context, const ::ProcessReaction* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendProcessReaction_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::SendProcessReaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendProcessReaction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::AsyncSendProcessReactionRaw(::grpc::ClientContext* context, const ::ProcessReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendProcessReaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::PrepareAsyncSendProcessReactionRaw(::grpc::ClientContext* context, const ::ProcessReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendProcessReaction_, context, request, false);
}

::grpc::Status Server::Stub::SendServiceReaction(::grpc::ClientContext* context, const ::ServiceReaction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendServiceReaction_, context, request, response);
}

void Server::Stub::experimental_async::SendServiceReaction(::grpc::ClientContext* context, const ::ServiceReaction* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendServiceReaction_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::SendServiceReaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendServiceReaction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::AsyncSendServiceReactionRaw(::grpc::ClientContext* context, const ::ServiceReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendServiceReaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Server::Stub::PrepareAsyncSendServiceReactionRaw(::grpc::ClientContext* context, const ::ServiceReaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_SendServiceReaction_, context, request, false);
}

Server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::FileReaction, ::Empty>(
          std::mem_fn(&Server::Service::SendFileReaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::RegistryReaction, ::Empty>(
          std::mem_fn(&Server::Service::SendRegistryReaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::ProcessReaction, ::Empty>(
          std::mem_fn(&Server::Service::SendProcessReaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::ServiceReaction, ::Empty>(
          std::mem_fn(&Server::Service::SendServiceReaction), this)));
}

Server::Service::~Service() {
}

::grpc::Status Server::Service::SendFileReaction(::grpc::ServerContext* context, const ::FileReaction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::SendRegistryReaction(::grpc::ServerContext* context, const ::RegistryReaction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::SendProcessReaction(::grpc::ServerContext* context, const ::ProcessReaction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::SendServiceReaction(::grpc::ServerContext* context, const ::ServiceReaction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


