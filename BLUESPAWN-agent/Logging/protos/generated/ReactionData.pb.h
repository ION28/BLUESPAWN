// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReactionData.proto

#ifndef PROTOBUF_INCLUDED_ReactionData_2eproto
#define PROTOBUF_INCLUDED_ReactionData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ReactionData_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ReactionData_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ReactionData_2eproto();
class ACLEntry;
class ACLEntryDefaultTypeInternal;
extern ACLEntryDefaultTypeInternal _ACLEntry_default_instance_;
class FileReaction;
class FileReactionDefaultTypeInternal;
extern FileReactionDefaultTypeInternal _FileReaction_default_instance_;
class FileReactionData;
class FileReactionDataDefaultTypeInternal;
extern FileReactionDataDefaultTypeInternal _FileReactionData_default_instance_;
class FileReactionData_Signature;
class FileReactionData_SignatureDefaultTypeInternal;
extern FileReactionData_SignatureDefaultTypeInternal _FileReactionData_Signature_default_instance_;
class ProcessReaction;
class ProcessReactionDefaultTypeInternal;
extern ProcessReactionDefaultTypeInternal _ProcessReaction_default_instance_;
class ProcessReactionData;
class ProcessReactionDataDefaultTypeInternal;
extern ProcessReactionDataDefaultTypeInternal _ProcessReactionData_default_instance_;
class RegistryReaction;
class RegistryReactionDefaultTypeInternal;
extern RegistryReactionDefaultTypeInternal _RegistryReaction_default_instance_;
class RegistryReactionData;
class RegistryReactionDataDefaultTypeInternal;
extern RegistryReactionDataDefaultTypeInternal _RegistryReactionData_default_instance_;
class ServiceReaction;
class ServiceReactionDefaultTypeInternal;
extern ServiceReactionDefaultTypeInternal _ServiceReaction_default_instance_;
class ServiceReactionData;
class ServiceReactionDataDefaultTypeInternal;
extern ServiceReactionDataDefaultTypeInternal _ServiceReactionData_default_instance_;
namespace google {
namespace protobuf {
template<> ::ACLEntry* Arena::CreateMaybeMessage<::ACLEntry>(Arena*);
template<> ::FileReaction* Arena::CreateMaybeMessage<::FileReaction>(Arena*);
template<> ::FileReactionData* Arena::CreateMaybeMessage<::FileReactionData>(Arena*);
template<> ::FileReactionData_Signature* Arena::CreateMaybeMessage<::FileReactionData_Signature>(Arena*);
template<> ::ProcessReaction* Arena::CreateMaybeMessage<::ProcessReaction>(Arena*);
template<> ::ProcessReactionData* Arena::CreateMaybeMessage<::ProcessReactionData>(Arena*);
template<> ::RegistryReaction* Arena::CreateMaybeMessage<::RegistryReaction>(Arena*);
template<> ::RegistryReactionData* Arena::CreateMaybeMessage<::RegistryReactionData>(Arena*);
template<> ::ServiceReaction* Arena::CreateMaybeMessage<::ServiceReaction>(Arena*);
template<> ::ServiceReactionData* Arena::CreateMaybeMessage<::ServiceReactionData>(Arena*);
}  // namespace protobuf
}  // namespace google

enum RegistryReactionData_Type {
  RegistryReactionData_Type_REG_SZ = 0,
  RegistryReactionData_Type_REG_MULTI_SZ = 1,
  RegistryReactionData_Type_REG_EXPAND_SZ = 2,
  RegistryReactionData_Type_REG_BINARY = 3,
  RegistryReactionData_Type_REG_DWORD = 4,
  RegistryReactionData_Type_REG_QWORD = 5,
  RegistryReactionData_Type_RegistryReactionData_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RegistryReactionData_Type_RegistryReactionData_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RegistryReactionData_Type_IsValid(int value);
const RegistryReactionData_Type RegistryReactionData_Type_Type_MIN = RegistryReactionData_Type_REG_SZ;
const RegistryReactionData_Type RegistryReactionData_Type_Type_MAX = RegistryReactionData_Type_REG_QWORD;
const int RegistryReactionData_Type_Type_ARRAYSIZE = RegistryReactionData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegistryReactionData_Type_descriptor();
inline const ::std::string& RegistryReactionData_Type_Name(RegistryReactionData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegistryReactionData_Type_descriptor(), value);
}
inline bool RegistryReactionData_Type_Parse(
    const ::std::string& name, RegistryReactionData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegistryReactionData_Type>(
    RegistryReactionData_Type_descriptor(), name, value);
}
// ===================================================================

class ACLEntry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ACLEntry) */ {
 public:
  ACLEntry();
  virtual ~ACLEntry();

  ACLEntry(const ACLEntry& from);

  inline ACLEntry& operator=(const ACLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACLEntry(ACLEntry&& from) noexcept
    : ACLEntry() {
    *this = ::std::move(from);
  }

  inline ACLEntry& operator=(ACLEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ACLEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACLEntry* internal_default_instance() {
    return reinterpret_cast<const ACLEntry*>(
               &_ACLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ACLEntry* other);
  friend void swap(ACLEntry& a, ACLEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACLEntry* New() const final {
    return CreateMaybeMessage<ACLEntry>(nullptr);
  }

  ACLEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACLEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACLEntry& from);
  void MergeFrom(const ACLEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACLEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string group = 2;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // uint32 securityAttributes = 3;
  void clear_securityattributes();
  static const int kSecurityAttributesFieldNumber = 3;
  ::google::protobuf::uint32 securityattributes() const;
  void set_securityattributes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ACLEntry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::uint32 securityattributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class FileReactionData_Signature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileReactionData.Signature) */ {
 public:
  FileReactionData_Signature();
  virtual ~FileReactionData_Signature();

  FileReactionData_Signature(const FileReactionData_Signature& from);

  inline FileReactionData_Signature& operator=(const FileReactionData_Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileReactionData_Signature(FileReactionData_Signature&& from) noexcept
    : FileReactionData_Signature() {
    *this = ::std::move(from);
  }

  inline FileReactionData_Signature& operator=(FileReactionData_Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileReactionData_Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileReactionData_Signature* internal_default_instance() {
    return reinterpret_cast<const FileReactionData_Signature*>(
               &_FileReactionData_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileReactionData_Signature* other);
  friend void swap(FileReactionData_Signature& a, FileReactionData_Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileReactionData_Signature* New() const final {
    return CreateMaybeMessage<FileReactionData_Signature>(nullptr);
  }

  FileReactionData_Signature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileReactionData_Signature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileReactionData_Signature& from);
  void MergeFrom(const FileReactionData_Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileReactionData_Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signerName = 1;
  void clear_signername();
  static const int kSignerNameFieldNumber = 1;
  const ::std::string& signername() const;
  void set_signername(const ::std::string& value);
  #if LANG_CXX11
  void set_signername(::std::string&& value);
  #endif
  void set_signername(const char* value);
  void set_signername(const char* value, size_t size);
  ::std::string* mutable_signername();
  ::std::string* release_signername();
  void set_allocated_signername(::std::string* signername);

  // string digestAlgorithm = 2;
  void clear_digestalgorithm();
  static const int kDigestAlgorithmFieldNumber = 2;
  const ::std::string& digestalgorithm() const;
  void set_digestalgorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_digestalgorithm(::std::string&& value);
  #endif
  void set_digestalgorithm(const char* value);
  void set_digestalgorithm(const char* value, size_t size);
  ::std::string* mutable_digestalgorithm();
  ::std::string* release_digestalgorithm();
  void set_allocated_digestalgorithm(::std::string* digestalgorithm);

  // uint32 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FileReactionData.Signature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signername_;
  ::google::protobuf::internal::ArenaStringPtr digestalgorithm_;
  ::google::protobuf::uint32 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class FileReactionData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileReactionData) */ {
 public:
  FileReactionData();
  virtual ~FileReactionData();

  FileReactionData(const FileReactionData& from);

  inline FileReactionData& operator=(const FileReactionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileReactionData(FileReactionData&& from) noexcept
    : FileReactionData() {
    *this = ::std::move(from);
  }

  inline FileReactionData& operator=(FileReactionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileReactionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileReactionData* internal_default_instance() {
    return reinterpret_cast<const FileReactionData*>(
               &_FileReactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileReactionData* other);
  friend void swap(FileReactionData& a, FileReactionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileReactionData* New() const final {
    return CreateMaybeMessage<FileReactionData>(nullptr);
  }

  FileReactionData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileReactionData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileReactionData& from);
  void MergeFrom(const FileReactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileReactionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileReactionData_Signature Signature;

  // accessors -------------------------------------------------------

  // repeated .FileReactionData.Signature signatures = 10;
  int signatures_size() const;
  void clear_signatures();
  static const int kSignaturesFieldNumber = 10;
  ::FileReactionData_Signature* mutable_signatures(int index);
  ::google::protobuf::RepeatedPtrField< ::FileReactionData_Signature >*
      mutable_signatures();
  const ::FileReactionData_Signature& signatures(int index) const;
  ::FileReactionData_Signature* add_signatures();
  const ::google::protobuf::RepeatedPtrField< ::FileReactionData_Signature >&
      signatures() const;

  // repeated .ACLEntry ACL = 11;
  int acl_size() const;
  void clear_acl();
  static const int kACLFieldNumber = 11;
  ::ACLEntry* mutable_acl(int index);
  ::google::protobuf::RepeatedPtrField< ::ACLEntry >*
      mutable_acl();
  const ::ACLEntry& acl(int index) const;
  ::ACLEntry* add_acl();
  const ::google::protobuf::RepeatedPtrField< ::ACLEntry >&
      acl() const;

  // string fileName = 2;
  void clear_filename();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string owner = 4;
  void clear_owner();
  static const int kOwnerFieldNumber = 4;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // bytes fileContents = 9;
  void clear_filecontents();
  static const int kFileContentsFieldNumber = 9;
  const ::std::string& filecontents() const;
  void set_filecontents(const ::std::string& value);
  #if LANG_CXX11
  void set_filecontents(::std::string&& value);
  #endif
  void set_filecontents(const char* value);
  void set_filecontents(const void* value, size_t size);
  ::std::string* mutable_filecontents();
  ::std::string* release_filecontents();
  void set_allocated_filecontents(::std::string* filecontents);

  // uint32 mitreID = 1;
  void clear_mitreid();
  static const int kMitreIDFieldNumber = 1;
  ::google::protobuf::uint32 mitreid() const;
  void set_mitreid(::google::protobuf::uint32 value);

  // uint32 size = 5;
  void clear_size();
  static const int kSizeFieldNumber = 5;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint32 timeCreated = 6;
  void clear_timecreated();
  static const int kTimeCreatedFieldNumber = 6;
  ::google::protobuf::uint32 timecreated() const;
  void set_timecreated(::google::protobuf::uint32 value);

  // uint32 timeModified = 7;
  void clear_timemodified();
  static const int kTimeModifiedFieldNumber = 7;
  ::google::protobuf::uint32 timemodified() const;
  void set_timemodified(::google::protobuf::uint32 value);

  // uint32 timeAccessed = 8;
  void clear_timeaccessed();
  static const int kTimeAccessedFieldNumber = 8;
  ::google::protobuf::uint32 timeaccessed() const;
  void set_timeaccessed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FileReactionData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::FileReactionData_Signature > signatures_;
  ::google::protobuf::RepeatedPtrField< ::ACLEntry > acl_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr filecontents_;
  ::google::protobuf::uint32 mitreid_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 timecreated_;
  ::google::protobuf::uint32 timemodified_;
  ::google::protobuf::uint32 timeaccessed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class RegistryReactionData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegistryReactionData) */ {
 public:
  RegistryReactionData();
  virtual ~RegistryReactionData();

  RegistryReactionData(const RegistryReactionData& from);

  inline RegistryReactionData& operator=(const RegistryReactionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegistryReactionData(RegistryReactionData&& from) noexcept
    : RegistryReactionData() {
    *this = ::std::move(from);
  }

  inline RegistryReactionData& operator=(RegistryReactionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegistryReactionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistryReactionData* internal_default_instance() {
    return reinterpret_cast<const RegistryReactionData*>(
               &_RegistryReactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RegistryReactionData* other);
  friend void swap(RegistryReactionData& a, RegistryReactionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegistryReactionData* New() const final {
    return CreateMaybeMessage<RegistryReactionData>(nullptr);
  }

  RegistryReactionData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegistryReactionData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegistryReactionData& from);
  void MergeFrom(const RegistryReactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistryReactionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegistryReactionData_Type Type;
  static const Type REG_SZ =
    RegistryReactionData_Type_REG_SZ;
  static const Type REG_MULTI_SZ =
    RegistryReactionData_Type_REG_MULTI_SZ;
  static const Type REG_EXPAND_SZ =
    RegistryReactionData_Type_REG_EXPAND_SZ;
  static const Type REG_BINARY =
    RegistryReactionData_Type_REG_BINARY;
  static const Type REG_DWORD =
    RegistryReactionData_Type_REG_DWORD;
  static const Type REG_QWORD =
    RegistryReactionData_Type_REG_QWORD;
  static inline bool Type_IsValid(int value) {
    return RegistryReactionData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RegistryReactionData_Type_Type_MIN;
  static const Type Type_MAX =
    RegistryReactionData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RegistryReactionData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RegistryReactionData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RegistryReactionData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RegistryReactionData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ACLEntry ACL = 6;
  int acl_size() const;
  void clear_acl();
  static const int kACLFieldNumber = 6;
  ::ACLEntry* mutable_acl(int index);
  ::google::protobuf::RepeatedPtrField< ::ACLEntry >*
      mutable_acl();
  const ::ACLEntry& acl(int index) const;
  ::ACLEntry* add_acl();
  const ::google::protobuf::RepeatedPtrField< ::ACLEntry >&
      acl() const;

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes newData = 4;
  void clear_newdata();
  static const int kNewDataFieldNumber = 4;
  const ::std::string& newdata() const;
  void set_newdata(const ::std::string& value);
  #if LANG_CXX11
  void set_newdata(::std::string&& value);
  #endif
  void set_newdata(const char* value);
  void set_newdata(const void* value, size_t size);
  ::std::string* mutable_newdata();
  ::std::string* release_newdata();
  void set_allocated_newdata(::std::string* newdata);

  // uint32 mitreID = 1;
  void clear_mitreid();
  static const int kMitreIDFieldNumber = 1;
  ::google::protobuf::uint32 mitreid() const;
  void set_mitreid(::google::protobuf::uint32 value);

  // .RegistryReactionData.Type type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::RegistryReactionData_Type type() const;
  void set_type(::RegistryReactionData_Type value);

  // @@protoc_insertion_point(class_scope:RegistryReactionData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ACLEntry > acl_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr newdata_;
  ::google::protobuf::uint32 mitreid_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class ProcessReactionData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProcessReactionData) */ {
 public:
  ProcessReactionData();
  virtual ~ProcessReactionData();

  ProcessReactionData(const ProcessReactionData& from);

  inline ProcessReactionData& operator=(const ProcessReactionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessReactionData(ProcessReactionData&& from) noexcept
    : ProcessReactionData() {
    *this = ::std::move(from);
  }

  inline ProcessReactionData& operator=(ProcessReactionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProcessReactionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessReactionData* internal_default_instance() {
    return reinterpret_cast<const ProcessReactionData*>(
               &_ProcessReactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ProcessReactionData* other);
  friend void swap(ProcessReactionData& a, ProcessReactionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessReactionData* New() const final {
    return CreateMaybeMessage<ProcessReactionData>(nullptr);
  }

  ProcessReactionData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessReactionData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessReactionData& from);
  void MergeFrom(const ProcessReactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReactionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string commandLine = 5;
  void clear_commandline();
  static const int kCommandLineFieldNumber = 5;
  const ::std::string& commandline() const;
  void set_commandline(const ::std::string& value);
  #if LANG_CXX11
  void set_commandline(::std::string&& value);
  #endif
  void set_commandline(const char* value);
  void set_commandline(const char* value, size_t size);
  ::std::string* mutable_commandline();
  ::std::string* release_commandline();
  void set_allocated_commandline(::std::string* commandline);

  // string path = 6;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string currentDirectory = 7;
  void clear_currentdirectory();
  static const int kCurrentDirectoryFieldNumber = 7;
  const ::std::string& currentdirectory() const;
  void set_currentdirectory(const ::std::string& value);
  #if LANG_CXX11
  void set_currentdirectory(::std::string&& value);
  #endif
  void set_currentdirectory(const char* value);
  void set_currentdirectory(const char* value, size_t size);
  ::std::string* mutable_currentdirectory();
  ::std::string* release_currentdirectory();
  void set_allocated_currentdirectory(::std::string* currentdirectory);

  // string autostartLocation = 8;
  void clear_autostartlocation();
  static const int kAutostartLocationFieldNumber = 8;
  const ::std::string& autostartlocation() const;
  void set_autostartlocation(const ::std::string& value);
  #if LANG_CXX11
  void set_autostartlocation(::std::string&& value);
  #endif
  void set_autostartlocation(const char* value);
  void set_autostartlocation(const char* value, size_t size);
  ::std::string* mutable_autostartlocation();
  ::std::string* release_autostartlocation();
  void set_allocated_autostartlocation(::std::string* autostartlocation);

  // string parent = 9;
  void clear_parent();
  static const int kParentFieldNumber = 9;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string user = 10;
  void clear_user();
  static const int kUserFieldNumber = 10;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // bytes binaryContents = 16;
  void clear_binarycontents();
  static const int kBinaryContentsFieldNumber = 16;
  const ::std::string& binarycontents() const;
  void set_binarycontents(const ::std::string& value);
  #if LANG_CXX11
  void set_binarycontents(::std::string&& value);
  #endif
  void set_binarycontents(const char* value);
  void set_binarycontents(const void* value, size_t size);
  ::std::string* mutable_binarycontents();
  ::std::string* release_binarycontents();
  void set_allocated_binarycontents(::std::string* binarycontents);

  // uint32 mitreID = 1;
  void clear_mitreid();
  static const int kMitreIDFieldNumber = 1;
  ::google::protobuf::uint32 mitreid() const;
  void set_mitreid(::google::protobuf::uint32 value);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // uint32 timeStarted = 11;
  void clear_timestarted();
  static const int kTimeStartedFieldNumber = 11;
  ::google::protobuf::uint32 timestarted() const;
  void set_timestarted(::google::protobuf::uint32 value);

  // uint32 recievedBytes = 12;
  void clear_recievedbytes();
  static const int kRecievedBytesFieldNumber = 12;
  ::google::protobuf::uint32 recievedbytes() const;
  void set_recievedbytes(::google::protobuf::uint32 value);

  // uint32 sentBytes = 13;
  void clear_sentbytes();
  static const int kSentBytesFieldNumber = 13;
  ::google::protobuf::uint32 sentbytes() const;
  void set_sentbytes(::google::protobuf::uint32 value);

  // uint32 privateBytes = 14;
  void clear_privatebytes();
  static const int kPrivateBytesFieldNumber = 14;
  ::google::protobuf::uint32 privatebytes() const;
  void set_privatebytes(::google::protobuf::uint32 value);

  // uint32 workingSet = 15;
  void clear_workingset();
  static const int kWorkingSetFieldNumber = 15;
  ::google::protobuf::uint32 workingset() const;
  void set_workingset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProcessReactionData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr commandline_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr currentdirectory_;
  ::google::protobuf::internal::ArenaStringPtr autostartlocation_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr binarycontents_;
  ::google::protobuf::uint32 mitreid_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 timestarted_;
  ::google::protobuf::uint32 recievedbytes_;
  ::google::protobuf::uint32 sentbytes_;
  ::google::protobuf::uint32 privatebytes_;
  ::google::protobuf::uint32 workingset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class ServiceReactionData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceReactionData) */ {
 public:
  ServiceReactionData();
  virtual ~ServiceReactionData();

  ServiceReactionData(const ServiceReactionData& from);

  inline ServiceReactionData& operator=(const ServiceReactionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceReactionData(ServiceReactionData&& from) noexcept
    : ServiceReactionData() {
    *this = ::std::move(from);
  }

  inline ServiceReactionData& operator=(ServiceReactionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServiceReactionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceReactionData* internal_default_instance() {
    return reinterpret_cast<const ServiceReactionData*>(
               &_ServiceReactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServiceReactionData* other);
  friend void swap(ServiceReactionData& a, ServiceReactionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceReactionData* New() const final {
    return CreateMaybeMessage<ServiceReactionData>(nullptr);
  }

  ServiceReactionData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceReactionData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceReactionData& from);
  void MergeFrom(const ServiceReactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceReactionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string logOnAs = 5;
  void clear_logonas();
  static const int kLogOnAsFieldNumber = 5;
  const ::std::string& logonas() const;
  void set_logonas(const ::std::string& value);
  #if LANG_CXX11
  void set_logonas(::std::string&& value);
  #endif
  void set_logonas(const char* value);
  void set_logonas(const char* value, size_t size);
  ::std::string* mutable_logonas();
  ::std::string* release_logonas();
  void set_allocated_logonas(::std::string* logonas);

  // string startupType = 6;
  void clear_startuptype();
  static const int kStartupTypeFieldNumber = 6;
  const ::std::string& startuptype() const;
  void set_startuptype(const ::std::string& value);
  #if LANG_CXX11
  void set_startuptype(::std::string&& value);
  #endif
  void set_startuptype(const char* value);
  void set_startuptype(const char* value, size_t size);
  ::std::string* mutable_startuptype();
  ::std::string* release_startuptype();
  void set_allocated_startuptype(::std::string* startuptype);

  // string startParameters = 7;
  void clear_startparameters();
  static const int kStartParametersFieldNumber = 7;
  const ::std::string& startparameters() const;
  void set_startparameters(const ::std::string& value);
  #if LANG_CXX11
  void set_startparameters(::std::string&& value);
  #endif
  void set_startparameters(const char* value);
  void set_startparameters(const char* value, size_t size);
  ::std::string* mutable_startparameters();
  ::std::string* release_startparameters();
  void set_allocated_startparameters(::std::string* startparameters);

  // string runProgramPath = 9;
  void clear_runprogrampath();
  static const int kRunProgramPathFieldNumber = 9;
  const ::std::string& runprogrampath() const;
  void set_runprogrampath(const ::std::string& value);
  #if LANG_CXX11
  void set_runprogrampath(::std::string&& value);
  #endif
  void set_runprogrampath(const char* value);
  void set_runprogrampath(const char* value, size_t size);
  ::std::string* mutable_runprogrampath();
  ::std::string* release_runprogrampath();
  void set_allocated_runprogrampath(::std::string* runprogrampath);

  // string binaryPath = 10;
  void clear_binarypath();
  static const int kBinaryPathFieldNumber = 10;
  const ::std::string& binarypath() const;
  void set_binarypath(const ::std::string& value);
  #if LANG_CXX11
  void set_binarypath(::std::string&& value);
  #endif
  void set_binarypath(const char* value);
  void set_binarypath(const char* value, size_t size);
  ::std::string* mutable_binarypath();
  ::std::string* release_binarypath();
  void set_allocated_binarypath(::std::string* binarypath);

  // bytes binaryContents = 11;
  void clear_binarycontents();
  static const int kBinaryContentsFieldNumber = 11;
  const ::std::string& binarycontents() const;
  void set_binarycontents(const ::std::string& value);
  #if LANG_CXX11
  void set_binarycontents(::std::string&& value);
  #endif
  void set_binarycontents(const char* value);
  void set_binarycontents(const void* value, size_t size);
  ::std::string* mutable_binarycontents();
  ::std::string* release_binarycontents();
  void set_allocated_binarycontents(::std::string* binarycontents);

  // uint32 mitreID = 1;
  void clear_mitreid();
  static const int kMitreIDFieldNumber = 1;
  ::google::protobuf::uint32 mitreid() const;
  void set_mitreid(::google::protobuf::uint32 value);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // bool allowDesktopInteract = 8;
  void clear_allowdesktopinteract();
  static const int kAllowDesktopInteractFieldNumber = 8;
  bool allowdesktopinteract() const;
  void set_allowdesktopinteract(bool value);

  // @@protoc_insertion_point(class_scope:ServiceReactionData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr logonas_;
  ::google::protobuf::internal::ArenaStringPtr startuptype_;
  ::google::protobuf::internal::ArenaStringPtr startparameters_;
  ::google::protobuf::internal::ArenaStringPtr runprogrampath_;
  ::google::protobuf::internal::ArenaStringPtr binarypath_;
  ::google::protobuf::internal::ArenaStringPtr binarycontents_;
  ::google::protobuf::uint32 mitreid_;
  ::google::protobuf::uint32 pid_;
  bool allowdesktopinteract_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class FileReaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileReaction) */ {
 public:
  FileReaction();
  virtual ~FileReaction();

  FileReaction(const FileReaction& from);

  inline FileReaction& operator=(const FileReaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileReaction(FileReaction&& from) noexcept
    : FileReaction() {
    *this = ::std::move(from);
  }

  inline FileReaction& operator=(FileReaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileReaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileReaction* internal_default_instance() {
    return reinterpret_cast<const FileReaction*>(
               &_FileReaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FileReaction* other);
  friend void swap(FileReaction& a, FileReaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileReaction* New() const final {
    return CreateMaybeMessage<FileReaction>(nullptr);
  }

  FileReaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileReaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileReaction& from);
  void MergeFrom(const FileReaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileReaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .FileReactionData info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::FileReactionData& info() const;
  ::FileReactionData* release_info();
  ::FileReactionData* mutable_info();
  void set_allocated_info(::FileReactionData* info);

  // @@protoc_insertion_point(class_scope:FileReaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::FileReactionData* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class RegistryReaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegistryReaction) */ {
 public:
  RegistryReaction();
  virtual ~RegistryReaction();

  RegistryReaction(const RegistryReaction& from);

  inline RegistryReaction& operator=(const RegistryReaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegistryReaction(RegistryReaction&& from) noexcept
    : RegistryReaction() {
    *this = ::std::move(from);
  }

  inline RegistryReaction& operator=(RegistryReaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegistryReaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistryReaction* internal_default_instance() {
    return reinterpret_cast<const RegistryReaction*>(
               &_RegistryReaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RegistryReaction* other);
  friend void swap(RegistryReaction& a, RegistryReaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegistryReaction* New() const final {
    return CreateMaybeMessage<RegistryReaction>(nullptr);
  }

  RegistryReaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegistryReaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegistryReaction& from);
  void MergeFrom(const RegistryReaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistryReaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .RegistryReactionData info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::RegistryReactionData& info() const;
  ::RegistryReactionData* release_info();
  ::RegistryReactionData* mutable_info();
  void set_allocated_info(::RegistryReactionData* info);

  // @@protoc_insertion_point(class_scope:RegistryReaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::RegistryReactionData* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class ProcessReaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProcessReaction) */ {
 public:
  ProcessReaction();
  virtual ~ProcessReaction();

  ProcessReaction(const ProcessReaction& from);

  inline ProcessReaction& operator=(const ProcessReaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessReaction(ProcessReaction&& from) noexcept
    : ProcessReaction() {
    *this = ::std::move(from);
  }

  inline ProcessReaction& operator=(ProcessReaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProcessReaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessReaction* internal_default_instance() {
    return reinterpret_cast<const ProcessReaction*>(
               &_ProcessReaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ProcessReaction* other);
  friend void swap(ProcessReaction& a, ProcessReaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessReaction* New() const final {
    return CreateMaybeMessage<ProcessReaction>(nullptr);
  }

  ProcessReaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessReaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessReaction& from);
  void MergeFrom(const ProcessReaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .ProcessReactionData info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::ProcessReactionData& info() const;
  ::ProcessReactionData* release_info();
  ::ProcessReactionData* mutable_info();
  void set_allocated_info(::ProcessReactionData* info);

  // @@protoc_insertion_point(class_scope:ProcessReaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::ProcessReactionData* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// -------------------------------------------------------------------

class ServiceReaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceReaction) */ {
 public:
  ServiceReaction();
  virtual ~ServiceReaction();

  ServiceReaction(const ServiceReaction& from);

  inline ServiceReaction& operator=(const ServiceReaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceReaction(ServiceReaction&& from) noexcept
    : ServiceReaction() {
    *this = ::std::move(from);
  }

  inline ServiceReaction& operator=(ServiceReaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServiceReaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceReaction* internal_default_instance() {
    return reinterpret_cast<const ServiceReaction*>(
               &_ServiceReaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ServiceReaction* other);
  friend void swap(ServiceReaction& a, ServiceReaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceReaction* New() const final {
    return CreateMaybeMessage<ServiceReaction>(nullptr);
  }

  ServiceReaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceReaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceReaction& from);
  void MergeFrom(const ServiceReaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceReaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .ServiceReactionData info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::ServiceReactionData& info() const;
  ::ServiceReactionData* release_info();
  ::ServiceReactionData* mutable_info();
  void set_allocated_info(::ServiceReactionData* info);

  // @@protoc_insertion_point(class_scope:ServiceReaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::ServiceReactionData* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ReactionData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ACLEntry

// string user = 1;
inline void ACLEntry::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ACLEntry::user() const {
  // @@protoc_insertion_point(field_get:ACLEntry.user)
  return user_.GetNoArena();
}
inline void ACLEntry::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ACLEntry.user)
}
#if LANG_CXX11
inline void ACLEntry::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ACLEntry.user)
}
#endif
inline void ACLEntry::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ACLEntry.user)
}
inline void ACLEntry::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ACLEntry.user)
}
inline ::std::string* ACLEntry::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:ACLEntry.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ACLEntry::release_user() {
  // @@protoc_insertion_point(field_release:ACLEntry.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ACLEntry::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:ACLEntry.user)
}

// string group = 2;
inline void ACLEntry::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ACLEntry::group() const {
  // @@protoc_insertion_point(field_get:ACLEntry.group)
  return group_.GetNoArena();
}
inline void ACLEntry::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ACLEntry.group)
}
#if LANG_CXX11
inline void ACLEntry::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ACLEntry.group)
}
#endif
inline void ACLEntry::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ACLEntry.group)
}
inline void ACLEntry::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ACLEntry.group)
}
inline ::std::string* ACLEntry::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:ACLEntry.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ACLEntry::release_group() {
  // @@protoc_insertion_point(field_release:ACLEntry.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ACLEntry::set_allocated_group(::std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:ACLEntry.group)
}

// uint32 securityAttributes = 3;
inline void ACLEntry::clear_securityattributes() {
  securityattributes_ = 0u;
}
inline ::google::protobuf::uint32 ACLEntry::securityattributes() const {
  // @@protoc_insertion_point(field_get:ACLEntry.securityAttributes)
  return securityattributes_;
}
inline void ACLEntry::set_securityattributes(::google::protobuf::uint32 value) {
  
  securityattributes_ = value;
  // @@protoc_insertion_point(field_set:ACLEntry.securityAttributes)
}

// -------------------------------------------------------------------

// FileReactionData_Signature

// string signerName = 1;
inline void FileReactionData_Signature::clear_signername() {
  signername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReactionData_Signature::signername() const {
  // @@protoc_insertion_point(field_get:FileReactionData.Signature.signerName)
  return signername_.GetNoArena();
}
inline void FileReactionData_Signature::set_signername(const ::std::string& value) {
  
  signername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReactionData.Signature.signerName)
}
#if LANG_CXX11
inline void FileReactionData_Signature::set_signername(::std::string&& value) {
  
  signername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReactionData.Signature.signerName)
}
#endif
inline void FileReactionData_Signature::set_signername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReactionData.Signature.signerName)
}
inline void FileReactionData_Signature::set_signername(const char* value, size_t size) {
  
  signername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReactionData.Signature.signerName)
}
inline ::std::string* FileReactionData_Signature::mutable_signername() {
  
  // @@protoc_insertion_point(field_mutable:FileReactionData.Signature.signerName)
  return signername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReactionData_Signature::release_signername() {
  // @@protoc_insertion_point(field_release:FileReactionData.Signature.signerName)
  
  return signername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReactionData_Signature::set_allocated_signername(::std::string* signername) {
  if (signername != nullptr) {
    
  } else {
    
  }
  signername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signername);
  // @@protoc_insertion_point(field_set_allocated:FileReactionData.Signature.signerName)
}

// string digestAlgorithm = 2;
inline void FileReactionData_Signature::clear_digestalgorithm() {
  digestalgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReactionData_Signature::digestalgorithm() const {
  // @@protoc_insertion_point(field_get:FileReactionData.Signature.digestAlgorithm)
  return digestalgorithm_.GetNoArena();
}
inline void FileReactionData_Signature::set_digestalgorithm(const ::std::string& value) {
  
  digestalgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReactionData.Signature.digestAlgorithm)
}
#if LANG_CXX11
inline void FileReactionData_Signature::set_digestalgorithm(::std::string&& value) {
  
  digestalgorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReactionData.Signature.digestAlgorithm)
}
#endif
inline void FileReactionData_Signature::set_digestalgorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digestalgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReactionData.Signature.digestAlgorithm)
}
inline void FileReactionData_Signature::set_digestalgorithm(const char* value, size_t size) {
  
  digestalgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReactionData.Signature.digestAlgorithm)
}
inline ::std::string* FileReactionData_Signature::mutable_digestalgorithm() {
  
  // @@protoc_insertion_point(field_mutable:FileReactionData.Signature.digestAlgorithm)
  return digestalgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReactionData_Signature::release_digestalgorithm() {
  // @@protoc_insertion_point(field_release:FileReactionData.Signature.digestAlgorithm)
  
  return digestalgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReactionData_Signature::set_allocated_digestalgorithm(::std::string* digestalgorithm) {
  if (digestalgorithm != nullptr) {
    
  } else {
    
  }
  digestalgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digestalgorithm);
  // @@protoc_insertion_point(field_set_allocated:FileReactionData.Signature.digestAlgorithm)
}

// uint32 timestamp = 3;
inline void FileReactionData_Signature::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 FileReactionData_Signature::timestamp() const {
  // @@protoc_insertion_point(field_get:FileReactionData.Signature.timestamp)
  return timestamp_;
}
inline void FileReactionData_Signature::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FileReactionData.Signature.timestamp)
}

// -------------------------------------------------------------------

// FileReactionData

// uint32 mitreID = 1;
inline void FileReactionData::clear_mitreid() {
  mitreid_ = 0u;
}
inline ::google::protobuf::uint32 FileReactionData::mitreid() const {
  // @@protoc_insertion_point(field_get:FileReactionData.mitreID)
  return mitreid_;
}
inline void FileReactionData::set_mitreid(::google::protobuf::uint32 value) {
  
  mitreid_ = value;
  // @@protoc_insertion_point(field_set:FileReactionData.mitreID)
}

// string fileName = 2;
inline void FileReactionData::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReactionData::filename() const {
  // @@protoc_insertion_point(field_get:FileReactionData.fileName)
  return filename_.GetNoArena();
}
inline void FileReactionData::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReactionData.fileName)
}
#if LANG_CXX11
inline void FileReactionData::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReactionData.fileName)
}
#endif
inline void FileReactionData::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReactionData.fileName)
}
inline void FileReactionData::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReactionData.fileName)
}
inline ::std::string* FileReactionData::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:FileReactionData.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReactionData::release_filename() {
  // @@protoc_insertion_point(field_release:FileReactionData.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReactionData::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:FileReactionData.fileName)
}

// string description = 3;
inline void FileReactionData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReactionData::description() const {
  // @@protoc_insertion_point(field_get:FileReactionData.description)
  return description_.GetNoArena();
}
inline void FileReactionData::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReactionData.description)
}
#if LANG_CXX11
inline void FileReactionData::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReactionData.description)
}
#endif
inline void FileReactionData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReactionData.description)
}
inline void FileReactionData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReactionData.description)
}
inline ::std::string* FileReactionData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FileReactionData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReactionData::release_description() {
  // @@protoc_insertion_point(field_release:FileReactionData.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReactionData::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FileReactionData.description)
}

// string owner = 4;
inline void FileReactionData::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReactionData::owner() const {
  // @@protoc_insertion_point(field_get:FileReactionData.owner)
  return owner_.GetNoArena();
}
inline void FileReactionData::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReactionData.owner)
}
#if LANG_CXX11
inline void FileReactionData::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReactionData.owner)
}
#endif
inline void FileReactionData::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReactionData.owner)
}
inline void FileReactionData::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReactionData.owner)
}
inline ::std::string* FileReactionData::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:FileReactionData.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReactionData::release_owner() {
  // @@protoc_insertion_point(field_release:FileReactionData.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReactionData::set_allocated_owner(::std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:FileReactionData.owner)
}

// uint32 size = 5;
inline void FileReactionData::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 FileReactionData::size() const {
  // @@protoc_insertion_point(field_get:FileReactionData.size)
  return size_;
}
inline void FileReactionData::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:FileReactionData.size)
}

// uint32 timeCreated = 6;
inline void FileReactionData::clear_timecreated() {
  timecreated_ = 0u;
}
inline ::google::protobuf::uint32 FileReactionData::timecreated() const {
  // @@protoc_insertion_point(field_get:FileReactionData.timeCreated)
  return timecreated_;
}
inline void FileReactionData::set_timecreated(::google::protobuf::uint32 value) {
  
  timecreated_ = value;
  // @@protoc_insertion_point(field_set:FileReactionData.timeCreated)
}

// uint32 timeModified = 7;
inline void FileReactionData::clear_timemodified() {
  timemodified_ = 0u;
}
inline ::google::protobuf::uint32 FileReactionData::timemodified() const {
  // @@protoc_insertion_point(field_get:FileReactionData.timeModified)
  return timemodified_;
}
inline void FileReactionData::set_timemodified(::google::protobuf::uint32 value) {
  
  timemodified_ = value;
  // @@protoc_insertion_point(field_set:FileReactionData.timeModified)
}

// uint32 timeAccessed = 8;
inline void FileReactionData::clear_timeaccessed() {
  timeaccessed_ = 0u;
}
inline ::google::protobuf::uint32 FileReactionData::timeaccessed() const {
  // @@protoc_insertion_point(field_get:FileReactionData.timeAccessed)
  return timeaccessed_;
}
inline void FileReactionData::set_timeaccessed(::google::protobuf::uint32 value) {
  
  timeaccessed_ = value;
  // @@protoc_insertion_point(field_set:FileReactionData.timeAccessed)
}

// bytes fileContents = 9;
inline void FileReactionData::clear_filecontents() {
  filecontents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReactionData::filecontents() const {
  // @@protoc_insertion_point(field_get:FileReactionData.fileContents)
  return filecontents_.GetNoArena();
}
inline void FileReactionData::set_filecontents(const ::std::string& value) {
  
  filecontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReactionData.fileContents)
}
#if LANG_CXX11
inline void FileReactionData::set_filecontents(::std::string&& value) {
  
  filecontents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReactionData.fileContents)
}
#endif
inline void FileReactionData::set_filecontents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filecontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReactionData.fileContents)
}
inline void FileReactionData::set_filecontents(const void* value, size_t size) {
  
  filecontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReactionData.fileContents)
}
inline ::std::string* FileReactionData::mutable_filecontents() {
  
  // @@protoc_insertion_point(field_mutable:FileReactionData.fileContents)
  return filecontents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReactionData::release_filecontents() {
  // @@protoc_insertion_point(field_release:FileReactionData.fileContents)
  
  return filecontents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReactionData::set_allocated_filecontents(::std::string* filecontents) {
  if (filecontents != nullptr) {
    
  } else {
    
  }
  filecontents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filecontents);
  // @@protoc_insertion_point(field_set_allocated:FileReactionData.fileContents)
}

// repeated .FileReactionData.Signature signatures = 10;
inline int FileReactionData::signatures_size() const {
  return signatures_.size();
}
inline void FileReactionData::clear_signatures() {
  signatures_.Clear();
}
inline ::FileReactionData_Signature* FileReactionData::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:FileReactionData.signatures)
  return signatures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FileReactionData_Signature >*
FileReactionData::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:FileReactionData.signatures)
  return &signatures_;
}
inline const ::FileReactionData_Signature& FileReactionData::signatures(int index) const {
  // @@protoc_insertion_point(field_get:FileReactionData.signatures)
  return signatures_.Get(index);
}
inline ::FileReactionData_Signature* FileReactionData::add_signatures() {
  // @@protoc_insertion_point(field_add:FileReactionData.signatures)
  return signatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FileReactionData_Signature >&
FileReactionData::signatures() const {
  // @@protoc_insertion_point(field_list:FileReactionData.signatures)
  return signatures_;
}

// repeated .ACLEntry ACL = 11;
inline int FileReactionData::acl_size() const {
  return acl_.size();
}
inline void FileReactionData::clear_acl() {
  acl_.Clear();
}
inline ::ACLEntry* FileReactionData::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:FileReactionData.ACL)
  return acl_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ACLEntry >*
FileReactionData::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:FileReactionData.ACL)
  return &acl_;
}
inline const ::ACLEntry& FileReactionData::acl(int index) const {
  // @@protoc_insertion_point(field_get:FileReactionData.ACL)
  return acl_.Get(index);
}
inline ::ACLEntry* FileReactionData::add_acl() {
  // @@protoc_insertion_point(field_add:FileReactionData.ACL)
  return acl_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ACLEntry >&
FileReactionData::acl() const {
  // @@protoc_insertion_point(field_list:FileReactionData.ACL)
  return acl_;
}

// -------------------------------------------------------------------

// RegistryReactionData

// uint32 mitreID = 1;
inline void RegistryReactionData::clear_mitreid() {
  mitreid_ = 0u;
}
inline ::google::protobuf::uint32 RegistryReactionData::mitreid() const {
  // @@protoc_insertion_point(field_get:RegistryReactionData.mitreID)
  return mitreid_;
}
inline void RegistryReactionData::set_mitreid(::google::protobuf::uint32 value) {
  
  mitreid_ = value;
  // @@protoc_insertion_point(field_set:RegistryReactionData.mitreID)
}

// string key = 2;
inline void RegistryReactionData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryReactionData::key() const {
  // @@protoc_insertion_point(field_get:RegistryReactionData.key)
  return key_.GetNoArena();
}
inline void RegistryReactionData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegistryReactionData.key)
}
#if LANG_CXX11
inline void RegistryReactionData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegistryReactionData.key)
}
#endif
inline void RegistryReactionData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegistryReactionData.key)
}
inline void RegistryReactionData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegistryReactionData.key)
}
inline ::std::string* RegistryReactionData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:RegistryReactionData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryReactionData::release_key() {
  // @@protoc_insertion_point(field_release:RegistryReactionData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryReactionData::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:RegistryReactionData.key)
}

// bytes data = 3;
inline void RegistryReactionData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryReactionData::data() const {
  // @@protoc_insertion_point(field_get:RegistryReactionData.data)
  return data_.GetNoArena();
}
inline void RegistryReactionData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegistryReactionData.data)
}
#if LANG_CXX11
inline void RegistryReactionData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegistryReactionData.data)
}
#endif
inline void RegistryReactionData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegistryReactionData.data)
}
inline void RegistryReactionData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegistryReactionData.data)
}
inline ::std::string* RegistryReactionData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:RegistryReactionData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryReactionData::release_data() {
  // @@protoc_insertion_point(field_release:RegistryReactionData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryReactionData::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:RegistryReactionData.data)
}

// bytes newData = 4;
inline void RegistryReactionData::clear_newdata() {
  newdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryReactionData::newdata() const {
  // @@protoc_insertion_point(field_get:RegistryReactionData.newData)
  return newdata_.GetNoArena();
}
inline void RegistryReactionData::set_newdata(const ::std::string& value) {
  
  newdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegistryReactionData.newData)
}
#if LANG_CXX11
inline void RegistryReactionData::set_newdata(::std::string&& value) {
  
  newdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegistryReactionData.newData)
}
#endif
inline void RegistryReactionData::set_newdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegistryReactionData.newData)
}
inline void RegistryReactionData::set_newdata(const void* value, size_t size) {
  
  newdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegistryReactionData.newData)
}
inline ::std::string* RegistryReactionData::mutable_newdata() {
  
  // @@protoc_insertion_point(field_mutable:RegistryReactionData.newData)
  return newdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryReactionData::release_newdata() {
  // @@protoc_insertion_point(field_release:RegistryReactionData.newData)
  
  return newdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryReactionData::set_allocated_newdata(::std::string* newdata) {
  if (newdata != nullptr) {
    
  } else {
    
  }
  newdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newdata);
  // @@protoc_insertion_point(field_set_allocated:RegistryReactionData.newData)
}

// .RegistryReactionData.Type type = 5;
inline void RegistryReactionData::clear_type() {
  type_ = 0;
}
inline ::RegistryReactionData_Type RegistryReactionData::type() const {
  // @@protoc_insertion_point(field_get:RegistryReactionData.type)
  return static_cast< ::RegistryReactionData_Type >(type_);
}
inline void RegistryReactionData::set_type(::RegistryReactionData_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:RegistryReactionData.type)
}

// repeated .ACLEntry ACL = 6;
inline int RegistryReactionData::acl_size() const {
  return acl_.size();
}
inline void RegistryReactionData::clear_acl() {
  acl_.Clear();
}
inline ::ACLEntry* RegistryReactionData::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:RegistryReactionData.ACL)
  return acl_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ACLEntry >*
RegistryReactionData::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:RegistryReactionData.ACL)
  return &acl_;
}
inline const ::ACLEntry& RegistryReactionData::acl(int index) const {
  // @@protoc_insertion_point(field_get:RegistryReactionData.ACL)
  return acl_.Get(index);
}
inline ::ACLEntry* RegistryReactionData::add_acl() {
  // @@protoc_insertion_point(field_add:RegistryReactionData.ACL)
  return acl_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ACLEntry >&
RegistryReactionData::acl() const {
  // @@protoc_insertion_point(field_list:RegistryReactionData.ACL)
  return acl_;
}

// -------------------------------------------------------------------

// ProcessReactionData

// uint32 mitreID = 1;
inline void ProcessReactionData::clear_mitreid() {
  mitreid_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::mitreid() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.mitreID)
  return mitreid_;
}
inline void ProcessReactionData::set_mitreid(::google::protobuf::uint32 value) {
  
  mitreid_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.mitreID)
}

// uint32 pid = 2;
inline void ProcessReactionData::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::pid() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.pid)
  return pid_;
}
inline void ProcessReactionData::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.pid)
}

// string name = 3;
inline void ProcessReactionData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::name() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.name)
  return name_.GetNoArena();
}
inline void ProcessReactionData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.name)
}
#if LANG_CXX11
inline void ProcessReactionData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.name)
}
#endif
inline void ProcessReactionData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.name)
}
inline void ProcessReactionData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.name)
}
inline ::std::string* ProcessReactionData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_name() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.name)
}

// string description = 4;
inline void ProcessReactionData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::description() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.description)
  return description_.GetNoArena();
}
inline void ProcessReactionData::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.description)
}
#if LANG_CXX11
inline void ProcessReactionData::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.description)
}
#endif
inline void ProcessReactionData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.description)
}
inline void ProcessReactionData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.description)
}
inline ::std::string* ProcessReactionData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_description() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.description)
}

// string commandLine = 5;
inline void ProcessReactionData::clear_commandline() {
  commandline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::commandline() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.commandLine)
  return commandline_.GetNoArena();
}
inline void ProcessReactionData::set_commandline(const ::std::string& value) {
  
  commandline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.commandLine)
}
#if LANG_CXX11
inline void ProcessReactionData::set_commandline(::std::string&& value) {
  
  commandline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.commandLine)
}
#endif
inline void ProcessReactionData::set_commandline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commandline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.commandLine)
}
inline void ProcessReactionData::set_commandline(const char* value, size_t size) {
  
  commandline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.commandLine)
}
inline ::std::string* ProcessReactionData::mutable_commandline() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.commandLine)
  return commandline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_commandline() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.commandLine)
  
  return commandline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_commandline(::std::string* commandline) {
  if (commandline != nullptr) {
    
  } else {
    
  }
  commandline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commandline);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.commandLine)
}

// string path = 6;
inline void ProcessReactionData::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::path() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.path)
  return path_.GetNoArena();
}
inline void ProcessReactionData::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.path)
}
#if LANG_CXX11
inline void ProcessReactionData::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.path)
}
#endif
inline void ProcessReactionData::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.path)
}
inline void ProcessReactionData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.path)
}
inline ::std::string* ProcessReactionData::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_path() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.path)
}

// string currentDirectory = 7;
inline void ProcessReactionData::clear_currentdirectory() {
  currentdirectory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::currentdirectory() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.currentDirectory)
  return currentdirectory_.GetNoArena();
}
inline void ProcessReactionData::set_currentdirectory(const ::std::string& value) {
  
  currentdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.currentDirectory)
}
#if LANG_CXX11
inline void ProcessReactionData::set_currentdirectory(::std::string&& value) {
  
  currentdirectory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.currentDirectory)
}
#endif
inline void ProcessReactionData::set_currentdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.currentDirectory)
}
inline void ProcessReactionData::set_currentdirectory(const char* value, size_t size) {
  
  currentdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.currentDirectory)
}
inline ::std::string* ProcessReactionData::mutable_currentdirectory() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.currentDirectory)
  return currentdirectory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_currentdirectory() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.currentDirectory)
  
  return currentdirectory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_currentdirectory(::std::string* currentdirectory) {
  if (currentdirectory != nullptr) {
    
  } else {
    
  }
  currentdirectory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currentdirectory);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.currentDirectory)
}

// string autostartLocation = 8;
inline void ProcessReactionData::clear_autostartlocation() {
  autostartlocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::autostartlocation() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.autostartLocation)
  return autostartlocation_.GetNoArena();
}
inline void ProcessReactionData::set_autostartlocation(const ::std::string& value) {
  
  autostartlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.autostartLocation)
}
#if LANG_CXX11
inline void ProcessReactionData::set_autostartlocation(::std::string&& value) {
  
  autostartlocation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.autostartLocation)
}
#endif
inline void ProcessReactionData::set_autostartlocation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  autostartlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.autostartLocation)
}
inline void ProcessReactionData::set_autostartlocation(const char* value, size_t size) {
  
  autostartlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.autostartLocation)
}
inline ::std::string* ProcessReactionData::mutable_autostartlocation() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.autostartLocation)
  return autostartlocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_autostartlocation() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.autostartLocation)
  
  return autostartlocation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_autostartlocation(::std::string* autostartlocation) {
  if (autostartlocation != nullptr) {
    
  } else {
    
  }
  autostartlocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autostartlocation);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.autostartLocation)
}

// string parent = 9;
inline void ProcessReactionData::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::parent() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.parent)
  return parent_.GetNoArena();
}
inline void ProcessReactionData::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.parent)
}
#if LANG_CXX11
inline void ProcessReactionData::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.parent)
}
#endif
inline void ProcessReactionData::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.parent)
}
inline void ProcessReactionData::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.parent)
}
inline ::std::string* ProcessReactionData::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_parent() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.parent)
}

// string user = 10;
inline void ProcessReactionData::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::user() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.user)
  return user_.GetNoArena();
}
inline void ProcessReactionData::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.user)
}
#if LANG_CXX11
inline void ProcessReactionData::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.user)
}
#endif
inline void ProcessReactionData::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.user)
}
inline void ProcessReactionData::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.user)
}
inline ::std::string* ProcessReactionData::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_user() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.user)
}

// uint32 timeStarted = 11;
inline void ProcessReactionData::clear_timestarted() {
  timestarted_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::timestarted() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.timeStarted)
  return timestarted_;
}
inline void ProcessReactionData::set_timestarted(::google::protobuf::uint32 value) {
  
  timestarted_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.timeStarted)
}

// uint32 recievedBytes = 12;
inline void ProcessReactionData::clear_recievedbytes() {
  recievedbytes_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::recievedbytes() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.recievedBytes)
  return recievedbytes_;
}
inline void ProcessReactionData::set_recievedbytes(::google::protobuf::uint32 value) {
  
  recievedbytes_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.recievedBytes)
}

// uint32 sentBytes = 13;
inline void ProcessReactionData::clear_sentbytes() {
  sentbytes_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::sentbytes() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.sentBytes)
  return sentbytes_;
}
inline void ProcessReactionData::set_sentbytes(::google::protobuf::uint32 value) {
  
  sentbytes_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.sentBytes)
}

// uint32 privateBytes = 14;
inline void ProcessReactionData::clear_privatebytes() {
  privatebytes_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::privatebytes() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.privateBytes)
  return privatebytes_;
}
inline void ProcessReactionData::set_privatebytes(::google::protobuf::uint32 value) {
  
  privatebytes_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.privateBytes)
}

// uint32 workingSet = 15;
inline void ProcessReactionData::clear_workingset() {
  workingset_ = 0u;
}
inline ::google::protobuf::uint32 ProcessReactionData::workingset() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.workingSet)
  return workingset_;
}
inline void ProcessReactionData::set_workingset(::google::protobuf::uint32 value) {
  
  workingset_ = value;
  // @@protoc_insertion_point(field_set:ProcessReactionData.workingSet)
}

// bytes binaryContents = 16;
inline void ProcessReactionData::clear_binarycontents() {
  binarycontents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReactionData::binarycontents() const {
  // @@protoc_insertion_point(field_get:ProcessReactionData.binaryContents)
  return binarycontents_.GetNoArena();
}
inline void ProcessReactionData::set_binarycontents(const ::std::string& value) {
  
  binarycontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReactionData.binaryContents)
}
#if LANG_CXX11
inline void ProcessReactionData::set_binarycontents(::std::string&& value) {
  
  binarycontents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReactionData.binaryContents)
}
#endif
inline void ProcessReactionData::set_binarycontents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binarycontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReactionData.binaryContents)
}
inline void ProcessReactionData::set_binarycontents(const void* value, size_t size) {
  
  binarycontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReactionData.binaryContents)
}
inline ::std::string* ProcessReactionData::mutable_binarycontents() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReactionData.binaryContents)
  return binarycontents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReactionData::release_binarycontents() {
  // @@protoc_insertion_point(field_release:ProcessReactionData.binaryContents)
  
  return binarycontents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReactionData::set_allocated_binarycontents(::std::string* binarycontents) {
  if (binarycontents != nullptr) {
    
  } else {
    
  }
  binarycontents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binarycontents);
  // @@protoc_insertion_point(field_set_allocated:ProcessReactionData.binaryContents)
}

// -------------------------------------------------------------------

// ServiceReactionData

// uint32 mitreID = 1;
inline void ServiceReactionData::clear_mitreid() {
  mitreid_ = 0u;
}
inline ::google::protobuf::uint32 ServiceReactionData::mitreid() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.mitreID)
  return mitreid_;
}
inline void ServiceReactionData::set_mitreid(::google::protobuf::uint32 value) {
  
  mitreid_ = value;
  // @@protoc_insertion_point(field_set:ServiceReactionData.mitreID)
}

// uint32 pid = 2;
inline void ServiceReactionData::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 ServiceReactionData::pid() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.pid)
  return pid_;
}
inline void ServiceReactionData::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:ServiceReactionData.pid)
}

// string name = 3;
inline void ServiceReactionData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::name() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.name)
  return name_.GetNoArena();
}
inline void ServiceReactionData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.name)
}
#if LANG_CXX11
inline void ServiceReactionData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.name)
}
#endif
inline void ServiceReactionData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.name)
}
inline void ServiceReactionData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.name)
}
inline ::std::string* ServiceReactionData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_name() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.name)
}

// string description = 4;
inline void ServiceReactionData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::description() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.description)
  return description_.GetNoArena();
}
inline void ServiceReactionData::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.description)
}
#if LANG_CXX11
inline void ServiceReactionData::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.description)
}
#endif
inline void ServiceReactionData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.description)
}
inline void ServiceReactionData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.description)
}
inline ::std::string* ServiceReactionData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_description() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.description)
}

// string logOnAs = 5;
inline void ServiceReactionData::clear_logonas() {
  logonas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::logonas() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.logOnAs)
  return logonas_.GetNoArena();
}
inline void ServiceReactionData::set_logonas(const ::std::string& value) {
  
  logonas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.logOnAs)
}
#if LANG_CXX11
inline void ServiceReactionData::set_logonas(::std::string&& value) {
  
  logonas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.logOnAs)
}
#endif
inline void ServiceReactionData::set_logonas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logonas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.logOnAs)
}
inline void ServiceReactionData::set_logonas(const char* value, size_t size) {
  
  logonas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.logOnAs)
}
inline ::std::string* ServiceReactionData::mutable_logonas() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.logOnAs)
  return logonas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_logonas() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.logOnAs)
  
  return logonas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_logonas(::std::string* logonas) {
  if (logonas != nullptr) {
    
  } else {
    
  }
  logonas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logonas);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.logOnAs)
}

// string startupType = 6;
inline void ServiceReactionData::clear_startuptype() {
  startuptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::startuptype() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.startupType)
  return startuptype_.GetNoArena();
}
inline void ServiceReactionData::set_startuptype(const ::std::string& value) {
  
  startuptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.startupType)
}
#if LANG_CXX11
inline void ServiceReactionData::set_startuptype(::std::string&& value) {
  
  startuptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.startupType)
}
#endif
inline void ServiceReactionData::set_startuptype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startuptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.startupType)
}
inline void ServiceReactionData::set_startuptype(const char* value, size_t size) {
  
  startuptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.startupType)
}
inline ::std::string* ServiceReactionData::mutable_startuptype() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.startupType)
  return startuptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_startuptype() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.startupType)
  
  return startuptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_startuptype(::std::string* startuptype) {
  if (startuptype != nullptr) {
    
  } else {
    
  }
  startuptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startuptype);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.startupType)
}

// string startParameters = 7;
inline void ServiceReactionData::clear_startparameters() {
  startparameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::startparameters() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.startParameters)
  return startparameters_.GetNoArena();
}
inline void ServiceReactionData::set_startparameters(const ::std::string& value) {
  
  startparameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.startParameters)
}
#if LANG_CXX11
inline void ServiceReactionData::set_startparameters(::std::string&& value) {
  
  startparameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.startParameters)
}
#endif
inline void ServiceReactionData::set_startparameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startparameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.startParameters)
}
inline void ServiceReactionData::set_startparameters(const char* value, size_t size) {
  
  startparameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.startParameters)
}
inline ::std::string* ServiceReactionData::mutable_startparameters() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.startParameters)
  return startparameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_startparameters() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.startParameters)
  
  return startparameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_startparameters(::std::string* startparameters) {
  if (startparameters != nullptr) {
    
  } else {
    
  }
  startparameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startparameters);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.startParameters)
}

// bool allowDesktopInteract = 8;
inline void ServiceReactionData::clear_allowdesktopinteract() {
  allowdesktopinteract_ = false;
}
inline bool ServiceReactionData::allowdesktopinteract() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.allowDesktopInteract)
  return allowdesktopinteract_;
}
inline void ServiceReactionData::set_allowdesktopinteract(bool value) {
  
  allowdesktopinteract_ = value;
  // @@protoc_insertion_point(field_set:ServiceReactionData.allowDesktopInteract)
}

// string runProgramPath = 9;
inline void ServiceReactionData::clear_runprogrampath() {
  runprogrampath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::runprogrampath() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.runProgramPath)
  return runprogrampath_.GetNoArena();
}
inline void ServiceReactionData::set_runprogrampath(const ::std::string& value) {
  
  runprogrampath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.runProgramPath)
}
#if LANG_CXX11
inline void ServiceReactionData::set_runprogrampath(::std::string&& value) {
  
  runprogrampath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.runProgramPath)
}
#endif
inline void ServiceReactionData::set_runprogrampath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runprogrampath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.runProgramPath)
}
inline void ServiceReactionData::set_runprogrampath(const char* value, size_t size) {
  
  runprogrampath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.runProgramPath)
}
inline ::std::string* ServiceReactionData::mutable_runprogrampath() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.runProgramPath)
  return runprogrampath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_runprogrampath() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.runProgramPath)
  
  return runprogrampath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_runprogrampath(::std::string* runprogrampath) {
  if (runprogrampath != nullptr) {
    
  } else {
    
  }
  runprogrampath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runprogrampath);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.runProgramPath)
}

// string binaryPath = 10;
inline void ServiceReactionData::clear_binarypath() {
  binarypath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::binarypath() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.binaryPath)
  return binarypath_.GetNoArena();
}
inline void ServiceReactionData::set_binarypath(const ::std::string& value) {
  
  binarypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.binaryPath)
}
#if LANG_CXX11
inline void ServiceReactionData::set_binarypath(::std::string&& value) {
  
  binarypath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.binaryPath)
}
#endif
inline void ServiceReactionData::set_binarypath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binarypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.binaryPath)
}
inline void ServiceReactionData::set_binarypath(const char* value, size_t size) {
  
  binarypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.binaryPath)
}
inline ::std::string* ServiceReactionData::mutable_binarypath() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.binaryPath)
  return binarypath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_binarypath() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.binaryPath)
  
  return binarypath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_binarypath(::std::string* binarypath) {
  if (binarypath != nullptr) {
    
  } else {
    
  }
  binarypath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binarypath);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.binaryPath)
}

// bytes binaryContents = 11;
inline void ServiceReactionData::clear_binarycontents() {
  binarycontents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReactionData::binarycontents() const {
  // @@protoc_insertion_point(field_get:ServiceReactionData.binaryContents)
  return binarycontents_.GetNoArena();
}
inline void ServiceReactionData::set_binarycontents(const ::std::string& value) {
  
  binarycontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReactionData.binaryContents)
}
#if LANG_CXX11
inline void ServiceReactionData::set_binarycontents(::std::string&& value) {
  
  binarycontents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReactionData.binaryContents)
}
#endif
inline void ServiceReactionData::set_binarycontents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binarycontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReactionData.binaryContents)
}
inline void ServiceReactionData::set_binarycontents(const void* value, size_t size) {
  
  binarycontents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReactionData.binaryContents)
}
inline ::std::string* ServiceReactionData::mutable_binarycontents() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReactionData.binaryContents)
  return binarycontents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReactionData::release_binarycontents() {
  // @@protoc_insertion_point(field_release:ServiceReactionData.binaryContents)
  
  return binarycontents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReactionData::set_allocated_binarycontents(::std::string* binarycontents) {
  if (binarycontents != nullptr) {
    
  } else {
    
  }
  binarycontents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binarycontents);
  // @@protoc_insertion_point(field_set_allocated:ServiceReactionData.binaryContents)
}

// -------------------------------------------------------------------

// FileReaction

// string description = 1;
inline void FileReaction::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileReaction::description() const {
  // @@protoc_insertion_point(field_get:FileReaction.description)
  return description_.GetNoArena();
}
inline void FileReaction::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileReaction.description)
}
#if LANG_CXX11
inline void FileReaction::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileReaction.description)
}
#endif
inline void FileReaction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileReaction.description)
}
inline void FileReaction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileReaction.description)
}
inline ::std::string* FileReaction::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FileReaction.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileReaction::release_description() {
  // @@protoc_insertion_point(field_release:FileReaction.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileReaction::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FileReaction.description)
}

// .FileReactionData info = 2;
inline bool FileReaction::has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline void FileReaction::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::FileReactionData& FileReaction::info() const {
  const ::FileReactionData* p = info_;
  // @@protoc_insertion_point(field_get:FileReaction.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::FileReactionData*>(
      &::_FileReactionData_default_instance_);
}
inline ::FileReactionData* FileReaction::release_info() {
  // @@protoc_insertion_point(field_release:FileReaction.info)
  
  ::FileReactionData* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::FileReactionData* FileReaction::mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileReactionData>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FileReaction.info)
  return info_;
}
inline void FileReaction::set_allocated_info(::FileReactionData* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:FileReaction.info)
}

// -------------------------------------------------------------------

// RegistryReaction

// string description = 1;
inline void RegistryReaction::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryReaction::description() const {
  // @@protoc_insertion_point(field_get:RegistryReaction.description)
  return description_.GetNoArena();
}
inline void RegistryReaction::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegistryReaction.description)
}
#if LANG_CXX11
inline void RegistryReaction::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegistryReaction.description)
}
#endif
inline void RegistryReaction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegistryReaction.description)
}
inline void RegistryReaction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegistryReaction.description)
}
inline ::std::string* RegistryReaction::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:RegistryReaction.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryReaction::release_description() {
  // @@protoc_insertion_point(field_release:RegistryReaction.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryReaction::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:RegistryReaction.description)
}

// .RegistryReactionData info = 2;
inline bool RegistryReaction::has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline void RegistryReaction::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::RegistryReactionData& RegistryReaction::info() const {
  const ::RegistryReactionData* p = info_;
  // @@protoc_insertion_point(field_get:RegistryReaction.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::RegistryReactionData*>(
      &::_RegistryReactionData_default_instance_);
}
inline ::RegistryReactionData* RegistryReaction::release_info() {
  // @@protoc_insertion_point(field_release:RegistryReaction.info)
  
  ::RegistryReactionData* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::RegistryReactionData* RegistryReaction::mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::RegistryReactionData>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RegistryReaction.info)
  return info_;
}
inline void RegistryReaction::set_allocated_info(::RegistryReactionData* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:RegistryReaction.info)
}

// -------------------------------------------------------------------

// ProcessReaction

// string description = 1;
inline void ProcessReaction::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessReaction::description() const {
  // @@protoc_insertion_point(field_get:ProcessReaction.description)
  return description_.GetNoArena();
}
inline void ProcessReaction::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProcessReaction.description)
}
#if LANG_CXX11
inline void ProcessReaction::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessReaction.description)
}
#endif
inline void ProcessReaction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessReaction.description)
}
inline void ProcessReaction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessReaction.description)
}
inline ::std::string* ProcessReaction::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ProcessReaction.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessReaction::release_description() {
  // @@protoc_insertion_point(field_release:ProcessReaction.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessReaction::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ProcessReaction.description)
}

// .ProcessReactionData info = 2;
inline bool ProcessReaction::has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline void ProcessReaction::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ProcessReactionData& ProcessReaction::info() const {
  const ::ProcessReactionData* p = info_;
  // @@protoc_insertion_point(field_get:ProcessReaction.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::ProcessReactionData*>(
      &::_ProcessReactionData_default_instance_);
}
inline ::ProcessReactionData* ProcessReaction::release_info() {
  // @@protoc_insertion_point(field_release:ProcessReaction.info)
  
  ::ProcessReactionData* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ProcessReactionData* ProcessReaction::mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProcessReactionData>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProcessReaction.info)
  return info_;
}
inline void ProcessReaction::set_allocated_info(::ProcessReactionData* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProcessReaction.info)
}

// -------------------------------------------------------------------

// ServiceReaction

// string description = 1;
inline void ServiceReaction::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceReaction::description() const {
  // @@protoc_insertion_point(field_get:ServiceReaction.description)
  return description_.GetNoArena();
}
inline void ServiceReaction::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceReaction.description)
}
#if LANG_CXX11
inline void ServiceReaction::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceReaction.description)
}
#endif
inline void ServiceReaction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceReaction.description)
}
inline void ServiceReaction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceReaction.description)
}
inline ::std::string* ServiceReaction::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ServiceReaction.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceReaction::release_description() {
  // @@protoc_insertion_point(field_release:ServiceReaction.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceReaction::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ServiceReaction.description)
}

// .ServiceReactionData info = 2;
inline bool ServiceReaction::has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline void ServiceReaction::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ServiceReactionData& ServiceReaction::info() const {
  const ::ServiceReactionData* p = info_;
  // @@protoc_insertion_point(field_get:ServiceReaction.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::ServiceReactionData*>(
      &::_ServiceReactionData_default_instance_);
}
inline ::ServiceReactionData* ServiceReaction::release_info() {
  // @@protoc_insertion_point(field_release:ServiceReaction.info)
  
  ::ServiceReactionData* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ServiceReactionData* ServiceReaction::mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServiceReactionData>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ServiceReaction.info)
  return info_;
}
inline void ServiceReaction::set_allocated_info(::ServiceReactionData* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ServiceReaction.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RegistryReactionData_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RegistryReactionData_Type>() {
  return ::RegistryReactionData_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ReactionData_2eproto
