// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ReactionData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gpb {

  /// <summary>Holder for reflection information generated from ReactionData.proto</summary>
  public static partial class ReactionDataReflection {

    #region Descriptor
    /// <summary>File descriptor for ReactionData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReactionDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJSZWFjdGlvbkRhdGEucHJvdG8SA2dwYiJDCghBQ0xFbnRyeRIMCgR1c2Vy",
            "GAEgASgJEg0KBWdyb3VwGAIgASgJEhoKEnNlY3VyaXR5QXR0cmlidXRlcxgD",
            "IAEoDSLcAgoQRmlsZVJlYWN0aW9uRGF0YRIPCgdtaXRyZUlEGAEgASgNEhAK",
            "CGZpbGVOYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEg0KBW93bmVy",
            "GAQgASgJEgwKBHNpemUYBSABKA0SEwoLdGltZUNyZWF0ZWQYBiABKA0SFAoM",
            "dGltZU1vZGlmaWVkGAcgASgNEhQKDHRpbWVBY2Nlc3NlZBgIIAEoDRIUCgxm",
            "aWxlQ29udGVudHMYCSABKAwSMwoKc2lnbmF0dXJlcxgKIAMoCzIfLmdwYi5G",
            "aWxlUmVhY3Rpb25EYXRhLlNpZ25hdHVyZRIaCgNBQ0wYCyADKAsyDS5ncGIu",
            "QUNMRW50cnkaSwoJU2lnbmF0dXJlEhIKCnNpZ25lck5hbWUYASABKAkSFwoP",
            "ZGlnZXN0QWxnb3JpdGhtGAIgASgJEhEKCXRpbWVzdGFtcBgDIAEoDSKEAgoU",
            "UmVnaXN0cnlSZWFjdGlvbkRhdGESDwoHbWl0cmVJRBgBIAEoDRILCgNrZXkY",
            "AiABKAkSDAoEZGF0YRgDIAEoDBIPCgduZXdEYXRhGAQgASgMEiwKBHR5cGUY",
            "BSABKA4yHi5ncGIuUmVnaXN0cnlSZWFjdGlvbkRhdGEuVHlwZRIaCgNBQ0wY",
            "BiADKAsyDS5ncGIuQUNMRW50cnkiZQoEVHlwZRIKCgZSRUdfU1oQABIQCgxS",
            "RUdfTVVMVElfU1oQARIRCg1SRUdfRVhQQU5EX1NaEAISDgoKUkVHX0JJTkFS",
            "WRADEg0KCVJFR19EV09SRBAEEg0KCVJFR19RV09SRBAFIs0CChNQcm9jZXNz",
            "UmVhY3Rpb25EYXRhEg8KB21pdHJlSUQYASABKA0SCwoDcGlkGAIgASgNEgwK",
            "BG5hbWUYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSEwoLY29tbWFuZExp",
            "bmUYBSABKAkSDAoEcGF0aBgGIAEoCRIYChBjdXJyZW50RGlyZWN0b3J5GAcg",
            "ASgJEhkKEWF1dG9zdGFydExvY2F0aW9uGAggASgJEg4KBnBhcmVudBgJIAEo",
            "CRIMCgR1c2VyGAogASgJEhMKC3RpbWVTdGFydGVkGAsgASgNEhUKDXJlY2ll",
            "dmVkQnl0ZXMYDCABKA0SEQoJc2VudEJ5dGVzGA0gASgNEhQKDHByaXZhdGVC",
            "eXRlcxgOIAEoDRISCgp3b3JraW5nU2V0GA8gASgNEhYKDmJpbmFyeUNvbnRl",
            "bnRzGBAgASgMIvcBChNTZXJ2aWNlUmVhY3Rpb25EYXRhEg8KB21pdHJlSUQY",
            "ASABKA0SCwoDcGlkGAIgASgNEgwKBG5hbWUYAyABKAkSEwoLZGVzY3JpcHRp",
            "b24YBCABKAkSDwoHbG9nT25BcxgFIAEoCRITCgtzdGFydHVwVHlwZRgGIAEo",
            "CRIXCg9zdGFydFBhcmFtZXRlcnMYByABKAkSHAoUYWxsb3dEZXNrdG9wSW50",
            "ZXJhY3QYCCABKAgSFgoOcnVuUHJvZ3JhbVBhdGgYCSABKAkSEgoKYmluYXJ5",
            "UGF0aBgKIAEoCRIWCg5iaW5hcnlDb250ZW50cxgLIAEoDCLXAQoISHVudElu",
            "Zm8SEAoIaHVudE5hbWUYASABKAkSLwoSaHVudEFnZ3Jlc3NpdmVuZXNzGAIg",
            "ASgOMhMuZ3BiLkFnZ3Jlc3NpdmVuZXNzEiAKC2h1bnRUYWN0aWNzGAMgAygO",
            "MgsuZ3BiLlRhY3RpYxIlCg5odW50Q2F0ZWdvcmllcxgEIAMoDjINLmdwYi5D",
            "YXRlZ29yeRIoCg9odW50RGF0YXNvdXJjZXMYBSADKA4yDy5ncGIuRGF0YVNv",
            "dXJjZRIVCg1odW50U3RhcnRUaW1lGAYgASgNIpACCgtIdW50TWVzc2FnZRIb",
            "CgRpbmZvGAEgASgLMg0uZ3BiLkh1bnRJbmZvEhQKDGV4dHJhTWVzc2FnZRgD",
            "IAEoCRItCg5maWxlRGV0ZWN0aW9ucxgEIAMoCzIVLmdwYi5GaWxlUmVhY3Rp",
            "b25EYXRhEjUKEnJlZ2lzdHJ5RGV0ZWN0aW9ucxgFIAMoCzIZLmdwYi5SZWdp",
            "c3RyeVJlYWN0aW9uRGF0YRIzChFwcm9jZXNzRGV0ZWN0aW9ucxgGIAMoCzIY",
            "LmdwYi5Qcm9jZXNzUmVhY3Rpb25EYXRhEjMKEXNlcnZpY2VEZXRlY3Rpb25z",
            "GAcgAygLMhguZ3BiLlNlcnZpY2VSZWFjdGlvbkRhdGEq5AEKBlRhY3RpYxIR",
            "Cg1Jbml0aWFsQWNjZXNzEAASDQoJRXhlY3V0aW9uEAESDwoLUGVyc2lzdGVu",
            "Y2UQAhIXChNQcml2aWxlZ2VFc2NhbGF0aW9uEAMSEgoORGVmZW5zZUV2YXNp",
            "b24QBBIUChBDcmVkZW50aWFsQWNjZXNzEAUSDQoJRGlzY292ZXJ5EAYSEwoP",
            "TGF0ZXJhbE1vdmVtZW50EAcSDgoKQ29sbGVjdGlvbhAIEhIKDkNvbW1hbmRD",
            "b250cm9sEAkSEAoMRXhmaWx0cmF0aW9uEAoSCgoGSW1wYWN0EAwqpQEKCkRh",
            "dGFTb3VyY2USEQoNU2VydmljZVNvdXJjZRAAEhEKDVByb2Nlc3NTb3VyY2UQ",
            "ARIQCgxEcml2ZXJTb3VyY2UQAhIUChBGaWxlU3lzdGVtU291cmNlEAMSEgoO",
            "UmVnaXN0cnlTb3VyY2UQBBINCglHUE9Tb3VyY2UQBRITCg9FdmVudExvZ3NT",
            "b3VyY2UQBhIRCg1OZXR3b3JrU291cmNlEAcqRQoIQ2F0ZWdvcnkSEgoOQ29u",
            "ZmlndXJhdGlvbnMQABINCglQcm9jZXNzZXMQARIJCgVGaWxlcxACEgsKB05l",
            "dHdvcmsQAypICg5BZ2dyZXNzaXZlbmVzcxILCgdDdXJzb3J5EAASDAoITW9k",
            "ZXJhdGUQARILCgdDYXJlZnVsEAISDgoKQWdncmVzc2l2ZRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Gpb.Tactic), typeof(global::Gpb.DataSource), typeof(global::Gpb.Category), typeof(global::Gpb.Aggressiveness), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.ACLEntry), global::Gpb.ACLEntry.Parser, new[]{ "User", "Group", "SecurityAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.FileReactionData), global::Gpb.FileReactionData.Parser, new[]{ "MitreID", "FileName", "Description", "Owner", "Size", "TimeCreated", "TimeModified", "TimeAccessed", "FileContents", "Signatures", "ACL" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.FileReactionData.Types.Signature), global::Gpb.FileReactionData.Types.Signature.Parser, new[]{ "SignerName", "DigestAlgorithm", "Timestamp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.RegistryReactionData), global::Gpb.RegistryReactionData.Parser, new[]{ "MitreID", "Key", "Data", "NewData", "Type", "ACL" }, null, new[]{ typeof(global::Gpb.RegistryReactionData.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.ProcessReactionData), global::Gpb.ProcessReactionData.Parser, new[]{ "MitreID", "Pid", "Name", "Description", "CommandLine", "Path", "CurrentDirectory", "AutostartLocation", "Parent", "User", "TimeStarted", "RecievedBytes", "SentBytes", "PrivateBytes", "WorkingSet", "BinaryContents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.ServiceReactionData), global::Gpb.ServiceReactionData.Parser, new[]{ "MitreID", "Pid", "Name", "Description", "LogOnAs", "StartupType", "StartParameters", "AllowDesktopInteract", "RunProgramPath", "BinaryPath", "BinaryContents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.HuntInfo), global::Gpb.HuntInfo.Parser, new[]{ "HuntName", "HuntAggressiveness", "HuntTactics", "HuntCategories", "HuntDatasources", "HuntStartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gpb.HuntMessage), global::Gpb.HuntMessage.Parser, new[]{ "Info", "ExtraMessage", "FileDetections", "RegistryDetections", "ProcessDetections", "ServiceDetections" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Tactic {
    [pbr::OriginalName("InitialAccess")] InitialAccess = 0,
    [pbr::OriginalName("Execution")] Execution = 1,
    [pbr::OriginalName("Persistence")] Persistence = 2,
    [pbr::OriginalName("PrivilegeEscalation")] PrivilegeEscalation = 3,
    [pbr::OriginalName("DefenseEvasion")] DefenseEvasion = 4,
    [pbr::OriginalName("CredentialAccess")] CredentialAccess = 5,
    [pbr::OriginalName("Discovery")] Discovery = 6,
    [pbr::OriginalName("LateralMovement")] LateralMovement = 7,
    [pbr::OriginalName("Collection")] Collection = 8,
    [pbr::OriginalName("CommandControl")] CommandControl = 9,
    [pbr::OriginalName("Exfiltration")] Exfiltration = 10,
    [pbr::OriginalName("Impact")] Impact = 12,
  }

  public enum DataSource {
    [pbr::OriginalName("ServiceSource")] ServiceSource = 0,
    [pbr::OriginalName("ProcessSource")] ProcessSource = 1,
    [pbr::OriginalName("DriverSource")] DriverSource = 2,
    [pbr::OriginalName("FileSystemSource")] FileSystemSource = 3,
    [pbr::OriginalName("RegistrySource")] RegistrySource = 4,
    [pbr::OriginalName("GPOSource")] Gposource = 5,
    [pbr::OriginalName("EventLogsSource")] EventLogsSource = 6,
    [pbr::OriginalName("NetworkSource")] NetworkSource = 7,
  }

  public enum Category {
    [pbr::OriginalName("Configurations")] Configurations = 0,
    [pbr::OriginalName("Processes")] Processes = 1,
    [pbr::OriginalName("Files")] Files = 2,
    [pbr::OriginalName("Network")] Network = 3,
  }

  public enum Aggressiveness {
    [pbr::OriginalName("Cursory")] Cursory = 0,
    [pbr::OriginalName("Moderate")] Moderate = 1,
    [pbr::OriginalName("Careful")] Careful = 2,
    [pbr::OriginalName("Aggressive")] Aggressive = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ACLEntry : pb::IMessage<ACLEntry> {
    private static readonly pb::MessageParser<ACLEntry> _parser = new pb::MessageParser<ACLEntry>(() => new ACLEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACLEntry(ACLEntry other) : this() {
      user_ = other.user_;
      group_ = other.group_;
      securityAttributes_ = other.securityAttributes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACLEntry Clone() {
      return new ACLEntry(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private string group_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Group {
      get { return group_; }
      set {
        group_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "securityAttributes" field.</summary>
    public const int SecurityAttributesFieldNumber = 3;
    private uint securityAttributes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecurityAttributes {
      get { return securityAttributes_; }
      set {
        securityAttributes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ACLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ACLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Group != other.Group) return false;
      if (SecurityAttributes != other.SecurityAttributes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Group.Length != 0) hash ^= Group.GetHashCode();
      if (SecurityAttributes != 0) hash ^= SecurityAttributes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Group.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Group);
      }
      if (SecurityAttributes != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SecurityAttributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Group.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Group);
      }
      if (SecurityAttributes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecurityAttributes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ACLEntry other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Group.Length != 0) {
        Group = other.Group;
      }
      if (other.SecurityAttributes != 0) {
        SecurityAttributes = other.SecurityAttributes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 18: {
            Group = input.ReadString();
            break;
          }
          case 24: {
            SecurityAttributes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FileReactionData : pb::IMessage<FileReactionData> {
    private static readonly pb::MessageParser<FileReactionData> _parser = new pb::MessageParser<FileReactionData>(() => new FileReactionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileReactionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileReactionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileReactionData(FileReactionData other) : this() {
      mitreID_ = other.mitreID_;
      fileName_ = other.fileName_;
      description_ = other.description_;
      owner_ = other.owner_;
      size_ = other.size_;
      timeCreated_ = other.timeCreated_;
      timeModified_ = other.timeModified_;
      timeAccessed_ = other.timeAccessed_;
      fileContents_ = other.fileContents_;
      signatures_ = other.signatures_.Clone();
      aCL_ = other.aCL_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileReactionData Clone() {
      return new FileReactionData(this);
    }

    /// <summary>Field number for the "mitreID" field.</summary>
    public const int MitreIDFieldNumber = 1;
    private uint mitreID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MitreID {
      get { return mitreID_; }
      set {
        mitreID_ = value;
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "timeCreated" field.</summary>
    public const int TimeCreatedFieldNumber = 6;
    private uint timeCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeCreated {
      get { return timeCreated_; }
      set {
        timeCreated_ = value;
      }
    }

    /// <summary>Field number for the "timeModified" field.</summary>
    public const int TimeModifiedFieldNumber = 7;
    private uint timeModified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeModified {
      get { return timeModified_; }
      set {
        timeModified_ = value;
      }
    }

    /// <summary>Field number for the "timeAccessed" field.</summary>
    public const int TimeAccessedFieldNumber = 8;
    private uint timeAccessed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAccessed {
      get { return timeAccessed_; }
      set {
        timeAccessed_ = value;
      }
    }

    /// <summary>Field number for the "fileContents" field.</summary>
    public const int FileContentsFieldNumber = 9;
    private pb::ByteString fileContents_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FileContents {
      get { return fileContents_; }
      set {
        fileContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signatures" field.</summary>
    public const int SignaturesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Gpb.FileReactionData.Types.Signature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(82, global::Gpb.FileReactionData.Types.Signature.Parser);
    private readonly pbc::RepeatedField<global::Gpb.FileReactionData.Types.Signature> signatures_ = new pbc::RepeatedField<global::Gpb.FileReactionData.Types.Signature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.FileReactionData.Types.Signature> Signatures {
      get { return signatures_; }
    }

    /// <summary>Field number for the "ACL" field.</summary>
    public const int ACLFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Gpb.ACLEntry> _repeated_aCL_codec
        = pb::FieldCodec.ForMessage(90, global::Gpb.ACLEntry.Parser);
    private readonly pbc::RepeatedField<global::Gpb.ACLEntry> aCL_ = new pbc::RepeatedField<global::Gpb.ACLEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.ACLEntry> ACL {
      get { return aCL_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileReactionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileReactionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MitreID != other.MitreID) return false;
      if (FileName != other.FileName) return false;
      if (Description != other.Description) return false;
      if (Owner != other.Owner) return false;
      if (Size != other.Size) return false;
      if (TimeCreated != other.TimeCreated) return false;
      if (TimeModified != other.TimeModified) return false;
      if (TimeAccessed != other.TimeAccessed) return false;
      if (FileContents != other.FileContents) return false;
      if(!signatures_.Equals(other.signatures_)) return false;
      if(!aCL_.Equals(other.aCL_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MitreID != 0) hash ^= MitreID.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (TimeCreated != 0) hash ^= TimeCreated.GetHashCode();
      if (TimeModified != 0) hash ^= TimeModified.GetHashCode();
      if (TimeAccessed != 0) hash ^= TimeAccessed.GetHashCode();
      if (FileContents.Length != 0) hash ^= FileContents.GetHashCode();
      hash ^= signatures_.GetHashCode();
      hash ^= aCL_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MitreID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MitreID);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Owner);
      }
      if (Size != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Size);
      }
      if (TimeCreated != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeCreated);
      }
      if (TimeModified != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TimeModified);
      }
      if (TimeAccessed != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeAccessed);
      }
      if (FileContents.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(FileContents);
      }
      signatures_.WriteTo(output, _repeated_signatures_codec);
      aCL_.WriteTo(output, _repeated_aCL_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MitreID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MitreID);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (TimeCreated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeCreated);
      }
      if (TimeModified != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeModified);
      }
      if (TimeAccessed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAccessed);
      }
      if (FileContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileContents);
      }
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      size += aCL_.CalculateSize(_repeated_aCL_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileReactionData other) {
      if (other == null) {
        return;
      }
      if (other.MitreID != 0) {
        MitreID = other.MitreID;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.TimeCreated != 0) {
        TimeCreated = other.TimeCreated;
      }
      if (other.TimeModified != 0) {
        TimeModified = other.TimeModified;
      }
      if (other.TimeAccessed != 0) {
        TimeAccessed = other.TimeAccessed;
      }
      if (other.FileContents.Length != 0) {
        FileContents = other.FileContents;
      }
      signatures_.Add(other.signatures_);
      aCL_.Add(other.aCL_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MitreID = input.ReadUInt32();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            Size = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeCreated = input.ReadUInt32();
            break;
          }
          case 56: {
            TimeModified = input.ReadUInt32();
            break;
          }
          case 64: {
            TimeAccessed = input.ReadUInt32();
            break;
          }
          case 74: {
            FileContents = input.ReadBytes();
            break;
          }
          case 82: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
          case 90: {
            aCL_.AddEntriesFrom(input, _repeated_aCL_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FileReactionData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Signature : pb::IMessage<Signature> {
        private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Signature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Gpb.FileReactionData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Signature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Signature(Signature other) : this() {
          signerName_ = other.signerName_;
          digestAlgorithm_ = other.digestAlgorithm_;
          timestamp_ = other.timestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Signature Clone() {
          return new Signature(this);
        }

        /// <summary>Field number for the "signerName" field.</summary>
        public const int SignerNameFieldNumber = 1;
        private string signerName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SignerName {
          get { return signerName_; }
          set {
            signerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "digestAlgorithm" field.</summary>
        public const int DigestAlgorithmFieldNumber = 2;
        private string digestAlgorithm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DigestAlgorithm {
          get { return digestAlgorithm_; }
          set {
            digestAlgorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private uint timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Signature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Signature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SignerName != other.SignerName) return false;
          if (DigestAlgorithm != other.DigestAlgorithm) return false;
          if (Timestamp != other.Timestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SignerName.Length != 0) hash ^= SignerName.GetHashCode();
          if (DigestAlgorithm.Length != 0) hash ^= DigestAlgorithm.GetHashCode();
          if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SignerName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(SignerName);
          }
          if (DigestAlgorithm.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DigestAlgorithm);
          }
          if (Timestamp != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Timestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SignerName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SignerName);
          }
          if (DigestAlgorithm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DigestAlgorithm);
          }
          if (Timestamp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Signature other) {
          if (other == null) {
            return;
          }
          if (other.SignerName.Length != 0) {
            SignerName = other.SignerName;
          }
          if (other.DigestAlgorithm.Length != 0) {
            DigestAlgorithm = other.DigestAlgorithm;
          }
          if (other.Timestamp != 0) {
            Timestamp = other.Timestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                SignerName = input.ReadString();
                break;
              }
              case 18: {
                DigestAlgorithm = input.ReadString();
                break;
              }
              case 24: {
                Timestamp = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RegistryReactionData : pb::IMessage<RegistryReactionData> {
    private static readonly pb::MessageParser<RegistryReactionData> _parser = new pb::MessageParser<RegistryReactionData>(() => new RegistryReactionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistryReactionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistryReactionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistryReactionData(RegistryReactionData other) : this() {
      mitreID_ = other.mitreID_;
      key_ = other.key_;
      data_ = other.data_;
      newData_ = other.newData_;
      type_ = other.type_;
      aCL_ = other.aCL_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistryReactionData Clone() {
      return new RegistryReactionData(this);
    }

    /// <summary>Field number for the "mitreID" field.</summary>
    public const int MitreIDFieldNumber = 1;
    private uint mitreID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MitreID {
      get { return mitreID_; }
      set {
        mitreID_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newData" field.</summary>
    public const int NewDataFieldNumber = 4;
    private pb::ByteString newData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewData {
      get { return newData_; }
      set {
        newData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Gpb.RegistryReactionData.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gpb.RegistryReactionData.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ACL" field.</summary>
    public const int ACLFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Gpb.ACLEntry> _repeated_aCL_codec
        = pb::FieldCodec.ForMessage(50, global::Gpb.ACLEntry.Parser);
    private readonly pbc::RepeatedField<global::Gpb.ACLEntry> aCL_ = new pbc::RepeatedField<global::Gpb.ACLEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.ACLEntry> ACL {
      get { return aCL_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistryReactionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistryReactionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MitreID != other.MitreID) return false;
      if (Key != other.Key) return false;
      if (Data != other.Data) return false;
      if (NewData != other.NewData) return false;
      if (Type != other.Type) return false;
      if(!aCL_.Equals(other.aCL_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MitreID != 0) hash ^= MitreID.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (NewData.Length != 0) hash ^= NewData.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= aCL_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MitreID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MitreID);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (NewData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(NewData);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      aCL_.WriteTo(output, _repeated_aCL_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MitreID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MitreID);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (NewData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewData);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += aCL_.CalculateSize(_repeated_aCL_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistryReactionData other) {
      if (other == null) {
        return;
      }
      if (other.MitreID != 0) {
        MitreID = other.MitreID;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.NewData.Length != 0) {
        NewData = other.NewData;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      aCL_.Add(other.aCL_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MitreID = input.ReadUInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            NewData = input.ReadBytes();
            break;
          }
          case 40: {
            Type = (global::Gpb.RegistryReactionData.Types.Type) input.ReadEnum();
            break;
          }
          case 50: {
            aCL_.AddEntriesFrom(input, _repeated_aCL_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RegistryReactionData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("REG_SZ")] RegSz = 0,
        [pbr::OriginalName("REG_MULTI_SZ")] RegMultiSz = 1,
        [pbr::OriginalName("REG_EXPAND_SZ")] RegExpandSz = 2,
        [pbr::OriginalName("REG_BINARY")] RegBinary = 3,
        [pbr::OriginalName("REG_DWORD")] RegDword = 4,
        [pbr::OriginalName("REG_QWORD")] RegQword = 5,
      }

    }
    #endregion

  }

  public sealed partial class ProcessReactionData : pb::IMessage<ProcessReactionData> {
    private static readonly pb::MessageParser<ProcessReactionData> _parser = new pb::MessageParser<ProcessReactionData>(() => new ProcessReactionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessReactionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessReactionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessReactionData(ProcessReactionData other) : this() {
      mitreID_ = other.mitreID_;
      pid_ = other.pid_;
      name_ = other.name_;
      description_ = other.description_;
      commandLine_ = other.commandLine_;
      path_ = other.path_;
      currentDirectory_ = other.currentDirectory_;
      autostartLocation_ = other.autostartLocation_;
      parent_ = other.parent_;
      user_ = other.user_;
      timeStarted_ = other.timeStarted_;
      recievedBytes_ = other.recievedBytes_;
      sentBytes_ = other.sentBytes_;
      privateBytes_ = other.privateBytes_;
      workingSet_ = other.workingSet_;
      binaryContents_ = other.binaryContents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessReactionData Clone() {
      return new ProcessReactionData(this);
    }

    /// <summary>Field number for the "mitreID" field.</summary>
    public const int MitreIDFieldNumber = 1;
    private uint mitreID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MitreID {
      get { return mitreID_; }
      set {
        mitreID_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commandLine" field.</summary>
    public const int CommandLineFieldNumber = 5;
    private string commandLine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandLine {
      get { return commandLine_; }
      set {
        commandLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 6;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentDirectory" field.</summary>
    public const int CurrentDirectoryFieldNumber = 7;
    private string currentDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentDirectory {
      get { return currentDirectory_; }
      set {
        currentDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "autostartLocation" field.</summary>
    public const int AutostartLocationFieldNumber = 8;
    private string autostartLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AutostartLocation {
      get { return autostartLocation_; }
      set {
        autostartLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 9;
    private string parent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 10;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStarted" field.</summary>
    public const int TimeStartedFieldNumber = 11;
    private uint timeStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeStarted {
      get { return timeStarted_; }
      set {
        timeStarted_ = value;
      }
    }

    /// <summary>Field number for the "recievedBytes" field.</summary>
    public const int RecievedBytesFieldNumber = 12;
    private uint recievedBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecievedBytes {
      get { return recievedBytes_; }
      set {
        recievedBytes_ = value;
      }
    }

    /// <summary>Field number for the "sentBytes" field.</summary>
    public const int SentBytesFieldNumber = 13;
    private uint sentBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SentBytes {
      get { return sentBytes_; }
      set {
        sentBytes_ = value;
      }
    }

    /// <summary>Field number for the "privateBytes" field.</summary>
    public const int PrivateBytesFieldNumber = 14;
    private uint privateBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrivateBytes {
      get { return privateBytes_; }
      set {
        privateBytes_ = value;
      }
    }

    /// <summary>Field number for the "workingSet" field.</summary>
    public const int WorkingSetFieldNumber = 15;
    private uint workingSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WorkingSet {
      get { return workingSet_; }
      set {
        workingSet_ = value;
      }
    }

    /// <summary>Field number for the "binaryContents" field.</summary>
    public const int BinaryContentsFieldNumber = 16;
    private pb::ByteString binaryContents_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BinaryContents {
      get { return binaryContents_; }
      set {
        binaryContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessReactionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessReactionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MitreID != other.MitreID) return false;
      if (Pid != other.Pid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (CommandLine != other.CommandLine) return false;
      if (Path != other.Path) return false;
      if (CurrentDirectory != other.CurrentDirectory) return false;
      if (AutostartLocation != other.AutostartLocation) return false;
      if (Parent != other.Parent) return false;
      if (User != other.User) return false;
      if (TimeStarted != other.TimeStarted) return false;
      if (RecievedBytes != other.RecievedBytes) return false;
      if (SentBytes != other.SentBytes) return false;
      if (PrivateBytes != other.PrivateBytes) return false;
      if (WorkingSet != other.WorkingSet) return false;
      if (BinaryContents != other.BinaryContents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MitreID != 0) hash ^= MitreID.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (CommandLine.Length != 0) hash ^= CommandLine.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (CurrentDirectory.Length != 0) hash ^= CurrentDirectory.GetHashCode();
      if (AutostartLocation.Length != 0) hash ^= AutostartLocation.GetHashCode();
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (TimeStarted != 0) hash ^= TimeStarted.GetHashCode();
      if (RecievedBytes != 0) hash ^= RecievedBytes.GetHashCode();
      if (SentBytes != 0) hash ^= SentBytes.GetHashCode();
      if (PrivateBytes != 0) hash ^= PrivateBytes.GetHashCode();
      if (WorkingSet != 0) hash ^= WorkingSet.GetHashCode();
      if (BinaryContents.Length != 0) hash ^= BinaryContents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MitreID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MitreID);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (CommandLine.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CommandLine);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Path);
      }
      if (CurrentDirectory.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentDirectory);
      }
      if (AutostartLocation.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AutostartLocation);
      }
      if (Parent.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Parent);
      }
      if (User.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(User);
      }
      if (TimeStarted != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TimeStarted);
      }
      if (RecievedBytes != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RecievedBytes);
      }
      if (SentBytes != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SentBytes);
      }
      if (PrivateBytes != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(PrivateBytes);
      }
      if (WorkingSet != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(WorkingSet);
      }
      if (BinaryContents.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(BinaryContents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MitreID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MitreID);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (CommandLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandLine);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (CurrentDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentDirectory);
      }
      if (AutostartLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AutostartLocation);
      }
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (TimeStarted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeStarted);
      }
      if (RecievedBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecievedBytes);
      }
      if (SentBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SentBytes);
      }
      if (PrivateBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrivateBytes);
      }
      if (WorkingSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorkingSet);
      }
      if (BinaryContents.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BinaryContents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessReactionData other) {
      if (other == null) {
        return;
      }
      if (other.MitreID != 0) {
        MitreID = other.MitreID;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.CommandLine.Length != 0) {
        CommandLine = other.CommandLine;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.CurrentDirectory.Length != 0) {
        CurrentDirectory = other.CurrentDirectory;
      }
      if (other.AutostartLocation.Length != 0) {
        AutostartLocation = other.AutostartLocation;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.TimeStarted != 0) {
        TimeStarted = other.TimeStarted;
      }
      if (other.RecievedBytes != 0) {
        RecievedBytes = other.RecievedBytes;
      }
      if (other.SentBytes != 0) {
        SentBytes = other.SentBytes;
      }
      if (other.PrivateBytes != 0) {
        PrivateBytes = other.PrivateBytes;
      }
      if (other.WorkingSet != 0) {
        WorkingSet = other.WorkingSet;
      }
      if (other.BinaryContents.Length != 0) {
        BinaryContents = other.BinaryContents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MitreID = input.ReadUInt32();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            CommandLine = input.ReadString();
            break;
          }
          case 50: {
            Path = input.ReadString();
            break;
          }
          case 58: {
            CurrentDirectory = input.ReadString();
            break;
          }
          case 66: {
            AutostartLocation = input.ReadString();
            break;
          }
          case 74: {
            Parent = input.ReadString();
            break;
          }
          case 82: {
            User = input.ReadString();
            break;
          }
          case 88: {
            TimeStarted = input.ReadUInt32();
            break;
          }
          case 96: {
            RecievedBytes = input.ReadUInt32();
            break;
          }
          case 104: {
            SentBytes = input.ReadUInt32();
            break;
          }
          case 112: {
            PrivateBytes = input.ReadUInt32();
            break;
          }
          case 120: {
            WorkingSet = input.ReadUInt32();
            break;
          }
          case 130: {
            BinaryContents = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServiceReactionData : pb::IMessage<ServiceReactionData> {
    private static readonly pb::MessageParser<ServiceReactionData> _parser = new pb::MessageParser<ServiceReactionData>(() => new ServiceReactionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceReactionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceReactionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceReactionData(ServiceReactionData other) : this() {
      mitreID_ = other.mitreID_;
      pid_ = other.pid_;
      name_ = other.name_;
      description_ = other.description_;
      logOnAs_ = other.logOnAs_;
      startupType_ = other.startupType_;
      startParameters_ = other.startParameters_;
      allowDesktopInteract_ = other.allowDesktopInteract_;
      runProgramPath_ = other.runProgramPath_;
      binaryPath_ = other.binaryPath_;
      binaryContents_ = other.binaryContents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceReactionData Clone() {
      return new ServiceReactionData(this);
    }

    /// <summary>Field number for the "mitreID" field.</summary>
    public const int MitreIDFieldNumber = 1;
    private uint mitreID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MitreID {
      get { return mitreID_; }
      set {
        mitreID_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logOnAs" field.</summary>
    public const int LogOnAsFieldNumber = 5;
    private string logOnAs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogOnAs {
      get { return logOnAs_; }
      set {
        logOnAs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startupType" field.</summary>
    public const int StartupTypeFieldNumber = 6;
    private string startupType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartupType {
      get { return startupType_; }
      set {
        startupType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startParameters" field.</summary>
    public const int StartParametersFieldNumber = 7;
    private string startParameters_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartParameters {
      get { return startParameters_; }
      set {
        startParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allowDesktopInteract" field.</summary>
    public const int AllowDesktopInteractFieldNumber = 8;
    private bool allowDesktopInteract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDesktopInteract {
      get { return allowDesktopInteract_; }
      set {
        allowDesktopInteract_ = value;
      }
    }

    /// <summary>Field number for the "runProgramPath" field.</summary>
    public const int RunProgramPathFieldNumber = 9;
    private string runProgramPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunProgramPath {
      get { return runProgramPath_; }
      set {
        runProgramPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "binaryPath" field.</summary>
    public const int BinaryPathFieldNumber = 10;
    private string binaryPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BinaryPath {
      get { return binaryPath_; }
      set {
        binaryPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "binaryContents" field.</summary>
    public const int BinaryContentsFieldNumber = 11;
    private pb::ByteString binaryContents_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BinaryContents {
      get { return binaryContents_; }
      set {
        binaryContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceReactionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceReactionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MitreID != other.MitreID) return false;
      if (Pid != other.Pid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (LogOnAs != other.LogOnAs) return false;
      if (StartupType != other.StartupType) return false;
      if (StartParameters != other.StartParameters) return false;
      if (AllowDesktopInteract != other.AllowDesktopInteract) return false;
      if (RunProgramPath != other.RunProgramPath) return false;
      if (BinaryPath != other.BinaryPath) return false;
      if (BinaryContents != other.BinaryContents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MitreID != 0) hash ^= MitreID.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (LogOnAs.Length != 0) hash ^= LogOnAs.GetHashCode();
      if (StartupType.Length != 0) hash ^= StartupType.GetHashCode();
      if (StartParameters.Length != 0) hash ^= StartParameters.GetHashCode();
      if (AllowDesktopInteract != false) hash ^= AllowDesktopInteract.GetHashCode();
      if (RunProgramPath.Length != 0) hash ^= RunProgramPath.GetHashCode();
      if (BinaryPath.Length != 0) hash ^= BinaryPath.GetHashCode();
      if (BinaryContents.Length != 0) hash ^= BinaryContents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MitreID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MitreID);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (LogOnAs.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogOnAs);
      }
      if (StartupType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StartupType);
      }
      if (StartParameters.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(StartParameters);
      }
      if (AllowDesktopInteract != false) {
        output.WriteRawTag(64);
        output.WriteBool(AllowDesktopInteract);
      }
      if (RunProgramPath.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RunProgramPath);
      }
      if (BinaryPath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BinaryPath);
      }
      if (BinaryContents.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(BinaryContents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MitreID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MitreID);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (LogOnAs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogOnAs);
      }
      if (StartupType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartupType);
      }
      if (StartParameters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartParameters);
      }
      if (AllowDesktopInteract != false) {
        size += 1 + 1;
      }
      if (RunProgramPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunProgramPath);
      }
      if (BinaryPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BinaryPath);
      }
      if (BinaryContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BinaryContents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceReactionData other) {
      if (other == null) {
        return;
      }
      if (other.MitreID != 0) {
        MitreID = other.MitreID;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.LogOnAs.Length != 0) {
        LogOnAs = other.LogOnAs;
      }
      if (other.StartupType.Length != 0) {
        StartupType = other.StartupType;
      }
      if (other.StartParameters.Length != 0) {
        StartParameters = other.StartParameters;
      }
      if (other.AllowDesktopInteract != false) {
        AllowDesktopInteract = other.AllowDesktopInteract;
      }
      if (other.RunProgramPath.Length != 0) {
        RunProgramPath = other.RunProgramPath;
      }
      if (other.BinaryPath.Length != 0) {
        BinaryPath = other.BinaryPath;
      }
      if (other.BinaryContents.Length != 0) {
        BinaryContents = other.BinaryContents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MitreID = input.ReadUInt32();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            LogOnAs = input.ReadString();
            break;
          }
          case 50: {
            StartupType = input.ReadString();
            break;
          }
          case 58: {
            StartParameters = input.ReadString();
            break;
          }
          case 64: {
            AllowDesktopInteract = input.ReadBool();
            break;
          }
          case 74: {
            RunProgramPath = input.ReadString();
            break;
          }
          case 82: {
            BinaryPath = input.ReadString();
            break;
          }
          case 90: {
            BinaryContents = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HuntInfo : pb::IMessage<HuntInfo> {
    private static readonly pb::MessageParser<HuntInfo> _parser = new pb::MessageParser<HuntInfo>(() => new HuntInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HuntInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuntInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuntInfo(HuntInfo other) : this() {
      huntName_ = other.huntName_;
      huntAggressiveness_ = other.huntAggressiveness_;
      huntTactics_ = other.huntTactics_.Clone();
      huntCategories_ = other.huntCategories_.Clone();
      huntDatasources_ = other.huntDatasources_.Clone();
      huntStartTime_ = other.huntStartTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuntInfo Clone() {
      return new HuntInfo(this);
    }

    /// <summary>Field number for the "huntName" field.</summary>
    public const int HuntNameFieldNumber = 1;
    private string huntName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HuntName {
      get { return huntName_; }
      set {
        huntName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "huntAggressiveness" field.</summary>
    public const int HuntAggressivenessFieldNumber = 2;
    private global::Gpb.Aggressiveness huntAggressiveness_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gpb.Aggressiveness HuntAggressiveness {
      get { return huntAggressiveness_; }
      set {
        huntAggressiveness_ = value;
      }
    }

    /// <summary>Field number for the "huntTactics" field.</summary>
    public const int HuntTacticsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gpb.Tactic> _repeated_huntTactics_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Gpb.Tactic) x);
    private readonly pbc::RepeatedField<global::Gpb.Tactic> huntTactics_ = new pbc::RepeatedField<global::Gpb.Tactic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.Tactic> HuntTactics {
      get { return huntTactics_; }
    }

    /// <summary>Field number for the "huntCategories" field.</summary>
    public const int HuntCategoriesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Gpb.Category> _repeated_huntCategories_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Gpb.Category) x);
    private readonly pbc::RepeatedField<global::Gpb.Category> huntCategories_ = new pbc::RepeatedField<global::Gpb.Category>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.Category> HuntCategories {
      get { return huntCategories_; }
    }

    /// <summary>Field number for the "huntDatasources" field.</summary>
    public const int HuntDatasourcesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Gpb.DataSource> _repeated_huntDatasources_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Gpb.DataSource) x);
    private readonly pbc::RepeatedField<global::Gpb.DataSource> huntDatasources_ = new pbc::RepeatedField<global::Gpb.DataSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.DataSource> HuntDatasources {
      get { return huntDatasources_; }
    }

    /// <summary>Field number for the "huntStartTime" field.</summary>
    public const int HuntStartTimeFieldNumber = 6;
    private uint huntStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HuntStartTime {
      get { return huntStartTime_; }
      set {
        huntStartTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HuntInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HuntInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HuntName != other.HuntName) return false;
      if (HuntAggressiveness != other.HuntAggressiveness) return false;
      if(!huntTactics_.Equals(other.huntTactics_)) return false;
      if(!huntCategories_.Equals(other.huntCategories_)) return false;
      if(!huntDatasources_.Equals(other.huntDatasources_)) return false;
      if (HuntStartTime != other.HuntStartTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HuntName.Length != 0) hash ^= HuntName.GetHashCode();
      if (HuntAggressiveness != 0) hash ^= HuntAggressiveness.GetHashCode();
      hash ^= huntTactics_.GetHashCode();
      hash ^= huntCategories_.GetHashCode();
      hash ^= huntDatasources_.GetHashCode();
      if (HuntStartTime != 0) hash ^= HuntStartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HuntName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HuntName);
      }
      if (HuntAggressiveness != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) HuntAggressiveness);
      }
      huntTactics_.WriteTo(output, _repeated_huntTactics_codec);
      huntCategories_.WriteTo(output, _repeated_huntCategories_codec);
      huntDatasources_.WriteTo(output, _repeated_huntDatasources_codec);
      if (HuntStartTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HuntStartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HuntName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HuntName);
      }
      if (HuntAggressiveness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HuntAggressiveness);
      }
      size += huntTactics_.CalculateSize(_repeated_huntTactics_codec);
      size += huntCategories_.CalculateSize(_repeated_huntCategories_codec);
      size += huntDatasources_.CalculateSize(_repeated_huntDatasources_codec);
      if (HuntStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HuntStartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HuntInfo other) {
      if (other == null) {
        return;
      }
      if (other.HuntName.Length != 0) {
        HuntName = other.HuntName;
      }
      if (other.HuntAggressiveness != 0) {
        HuntAggressiveness = other.HuntAggressiveness;
      }
      huntTactics_.Add(other.huntTactics_);
      huntCategories_.Add(other.huntCategories_);
      huntDatasources_.Add(other.huntDatasources_);
      if (other.HuntStartTime != 0) {
        HuntStartTime = other.HuntStartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HuntName = input.ReadString();
            break;
          }
          case 16: {
            HuntAggressiveness = (global::Gpb.Aggressiveness) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            huntTactics_.AddEntriesFrom(input, _repeated_huntTactics_codec);
            break;
          }
          case 34:
          case 32: {
            huntCategories_.AddEntriesFrom(input, _repeated_huntCategories_codec);
            break;
          }
          case 42:
          case 40: {
            huntDatasources_.AddEntriesFrom(input, _repeated_huntDatasources_codec);
            break;
          }
          case 48: {
            HuntStartTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HuntMessage : pb::IMessage<HuntMessage> {
    private static readonly pb::MessageParser<HuntMessage> _parser = new pb::MessageParser<HuntMessage>(() => new HuntMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HuntMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gpb.ReactionDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuntMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuntMessage(HuntMessage other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      extraMessage_ = other.extraMessage_;
      fileDetections_ = other.fileDetections_.Clone();
      registryDetections_ = other.registryDetections_.Clone();
      processDetections_ = other.processDetections_.Clone();
      serviceDetections_ = other.serviceDetections_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuntMessage Clone() {
      return new HuntMessage(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Gpb.HuntInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gpb.HuntInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "extraMessage" field.</summary>
    public const int ExtraMessageFieldNumber = 3;
    private string extraMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraMessage {
      get { return extraMessage_; }
      set {
        extraMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileDetections" field.</summary>
    public const int FileDetectionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Gpb.FileReactionData> _repeated_fileDetections_codec
        = pb::FieldCodec.ForMessage(34, global::Gpb.FileReactionData.Parser);
    private readonly pbc::RepeatedField<global::Gpb.FileReactionData> fileDetections_ = new pbc::RepeatedField<global::Gpb.FileReactionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.FileReactionData> FileDetections {
      get { return fileDetections_; }
    }

    /// <summary>Field number for the "registryDetections" field.</summary>
    public const int RegistryDetectionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Gpb.RegistryReactionData> _repeated_registryDetections_codec
        = pb::FieldCodec.ForMessage(42, global::Gpb.RegistryReactionData.Parser);
    private readonly pbc::RepeatedField<global::Gpb.RegistryReactionData> registryDetections_ = new pbc::RepeatedField<global::Gpb.RegistryReactionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.RegistryReactionData> RegistryDetections {
      get { return registryDetections_; }
    }

    /// <summary>Field number for the "processDetections" field.</summary>
    public const int ProcessDetectionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Gpb.ProcessReactionData> _repeated_processDetections_codec
        = pb::FieldCodec.ForMessage(50, global::Gpb.ProcessReactionData.Parser);
    private readonly pbc::RepeatedField<global::Gpb.ProcessReactionData> processDetections_ = new pbc::RepeatedField<global::Gpb.ProcessReactionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.ProcessReactionData> ProcessDetections {
      get { return processDetections_; }
    }

    /// <summary>Field number for the "serviceDetections" field.</summary>
    public const int ServiceDetectionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Gpb.ServiceReactionData> _repeated_serviceDetections_codec
        = pb::FieldCodec.ForMessage(58, global::Gpb.ServiceReactionData.Parser);
    private readonly pbc::RepeatedField<global::Gpb.ServiceReactionData> serviceDetections_ = new pbc::RepeatedField<global::Gpb.ServiceReactionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gpb.ServiceReactionData> ServiceDetections {
      get { return serviceDetections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HuntMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HuntMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (ExtraMessage != other.ExtraMessage) return false;
      if(!fileDetections_.Equals(other.fileDetections_)) return false;
      if(!registryDetections_.Equals(other.registryDetections_)) return false;
      if(!processDetections_.Equals(other.processDetections_)) return false;
      if(!serviceDetections_.Equals(other.serviceDetections_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (ExtraMessage.Length != 0) hash ^= ExtraMessage.GetHashCode();
      hash ^= fileDetections_.GetHashCode();
      hash ^= registryDetections_.GetHashCode();
      hash ^= processDetections_.GetHashCode();
      hash ^= serviceDetections_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (ExtraMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExtraMessage);
      }
      fileDetections_.WriteTo(output, _repeated_fileDetections_codec);
      registryDetections_.WriteTo(output, _repeated_registryDetections_codec);
      processDetections_.WriteTo(output, _repeated_processDetections_codec);
      serviceDetections_.WriteTo(output, _repeated_serviceDetections_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (ExtraMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraMessage);
      }
      size += fileDetections_.CalculateSize(_repeated_fileDetections_codec);
      size += registryDetections_.CalculateSize(_repeated_registryDetections_codec);
      size += processDetections_.CalculateSize(_repeated_processDetections_codec);
      size += serviceDetections_.CalculateSize(_repeated_serviceDetections_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HuntMessage other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Gpb.HuntInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.ExtraMessage.Length != 0) {
        ExtraMessage = other.ExtraMessage;
      }
      fileDetections_.Add(other.fileDetections_);
      registryDetections_.Add(other.registryDetections_);
      processDetections_.Add(other.processDetections_);
      serviceDetections_.Add(other.serviceDetections_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Gpb.HuntInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 26: {
            ExtraMessage = input.ReadString();
            break;
          }
          case 34: {
            fileDetections_.AddEntriesFrom(input, _repeated_fileDetections_codec);
            break;
          }
          case 42: {
            registryDetections_.AddEntriesFrom(input, _repeated_registryDetections_codec);
            break;
          }
          case 50: {
            processDetections_.AddEntriesFrom(input, _repeated_processDetections_codec);
            break;
          }
          case 58: {
            serviceDetections_.AddEntriesFrom(input, _repeated_serviceDetections_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
